[{"path":"index.html","id":"preface","chapter":"Preface","heading":"Preface","text":"guide take make link modules using SpaDES two examples. examples draw basic uses statistical models ecology, notably relationships enviromental variables species abundance presence.Part 1 minimal, uses dummy data. meant introduce different components SpaDES module.\nPart 2 uses real freely available data, provides deeper look several useful aspects SpaDES, notably caching spatial data processing.install SpaDES, please look SpaDES installation.","code":""},{"path":"part1.html","id":"part1","chapter":"1 Introducing SpaDES with a dummy ecological model","heading":"1 Introducing SpaDES with a dummy ecological model","text":"Authors: Ceres Barros, Tati MichelettiLet’s imagine want explore relationship species’ abundance temperature changes time.\nabundance data temperature data constantly updated simulation model, want analyse relationship two iteratively, without needing manually run script account newly generated data inputs.","code":""},{"path":"part1.html","id":"before-spades","chapter":"1 Introducing SpaDES with a dummy ecological model","heading":"1.1 BEFORE SpaDES…","text":"use R develop species abundance temperature simulation models ‘conventional way’, ’ll probably ) (worst case scenario) several scripts run simulations data treatment/analysis separately executed manually, ii) long script everything happens - simulations data analysis -, iii) main script sources others simulation analyses.\nOption common different software used different parts process (e.g., simulation model C++ generates data analysed R).\nOption ii inconvenient long scripts make changes updates script - debugging can also tiresome.\nOption iii, similar SpaDES way thinking.\ndifference SpaDES defines standard way writing different components model, modelling framework.\nmakes changing, updating sharing code - modules - easier, well swapping adding modules modelling framework.example minimal unlikely show full benefits using SpaDES - accomplished fairly short script.\nHowever, introduces different parts module link modules.Part 2 goes step uses real datasets project species presences across landscape Canada.\nexample, introduce SpaDES features commonly use work (e.g., caching spatial data processing) provide coding best practices use (e.g., code assertions).","code":""},{"path":"part1.html","id":"setup","chapter":"1 Introducing SpaDES with a dummy ecological model","heading":"1.1.1 Setup","text":"Load necessary packagesAnd now create raster template:","code":"\n## please start from a clean R session\nlibrary(raster)\nlibrary(quickPlot)\nlibrary(ggplot2)\nlibrary(SpaDES.tools)\nr <- raster(nrows = 100, ncols = 100, xmn = -50, xmx = 50, ymn = -50, ymx = 50)"},{"path":"part1.html","id":"species-abundance-simulations","chapter":"1 Introducing SpaDES with a dummy ecological model","heading":"1.1.2 Species abundance “simulations”","text":"simple “simulation” model (form function) generates rasters follow Gaussian distributionSet length simulation (simply number model iterations), run plot results (ABUNDANCE plots together):","code":"\nabundance_model <- function(ras, Time) {\n  abund_outputs <- list()\n  for (t in 1:Time) { \n    abund_outputs[[t]] <- gaussMap(ras, scale = 100, var = 0.03) \n  }\n  return(abund_outputs)\n}\nTime <- 10\nabundance <- abundance_model(r = r, Time = Time)\ndev()\nplot(stack(abundance))"},{"path":"part1.html","id":"temperature-simulations","chapter":"1 Introducing SpaDES with a dummy ecological model","heading":"1.1.3 Temperature “simulations”","text":"temperature simulation model similar vegetation one - remember dummy example.Run model plot results (temperature plots together)","code":"\ntemp_model <- function(r, Time) {\n  temp_outputs <- list()\n  for (t in 1:Time) { \n    temp_outputs[[t]] <- gaussMap(r, scale = 100, var = 0.1) \n  }\n  return(temp_outputs)\n}\ntemperature <- temp_model(r = r, Time = Time)\nplot(stack(temperature))"},{"path":"part1.html","id":"data-analysis","chapter":"1 Introducing SpaDES with a dummy ecological model","heading":"1.1.4 Data analysis","text":"Now analyse species abundance temperature correlated.\nFirst, create data analysis function (simple linear model):create loop analyse plot time-series:","code":"\nstats_analysis <- function(Data) {\n  if (all(c(\"abund\", \"temp\") %in% colnames(Data))) {\n    lm1 <- lm(abund ~ temp, data = Data)\n    ggplot(Data) + \n      geom_point(aes(x = temp, y = abund)) +\n      geom_abline(intercept = lm1$coefficients[\"(Intercept)\"], \n                  slope = lm1$coefficients[\"temp\"], size = 2, col = \"blue\") +\n      theme_bw() +\n      labs(x = \"Temp.\", y = \"Species abundance\")\n    \n  } else {\n    stop(\"Data must contain 'abund' and 'temp' columns\")\n  }\n}\nfor (t in 1:Time) {\n  outputdata <- data.frame(abund = abundance[[t]][], temp = temperature[[t]][])\n  stats_analysis(Data = outputdata)\n}"},{"path":"part1.html","id":"after-spades","chapter":"1 Introducing SpaDES with a dummy ecological model","heading":"1.2 AFTER SpaDES…","text":"","code":""},{"path":"part1.html","id":"the-controller-script","chapter":"1 Introducing SpaDES with a dummy ecological model","heading":"1.2.1 The controller script","text":"Let us now solve problem using SpaDES approach.\nstart creating .R script (can name) sets runs SpaDES model.\ncontroller script example located root SpaDES4Dummies GitHub repository name Example1_DummyModel.R.\nNote Markdown (.Rmd) scripts can also used instead R scripts.start making sure SpaDES packages dependencies installed date using SpaDES.install::installSpaDES.create modules using newModule.\nnewModule creates module folder (speciesAbundance) inside /modules contains module .R script template, well documentation template (.Rmd file).\nAlthough discussing .Rmd file, please bear mind fundamental part creating reproducible transparent module - check Guide Reproducible Code Ecology Evolution British Ecological Society).\ndocumentation contain description module, input, parameters outputs, potentially reproducible examples module executed.newModule also created folder /data data necessary module can put , folder /tests may contain testing scripts.\nusing either example./!\\ ATTENTION /!\\newModule run , otherwise replace edits contents module folder templates - wrapped statement .Now go ahead, open speciesAbundance.R script look .","code":"\n## start again from a clean R session\nif (!require(\"Require\")) install.packages(\"Require\")\nRequire::Require(\"PredictiveEcology/SpaDES.install@development\")\nSpaDES.install::installSpaDES(ask = TRUE)\n\nlibrary(SpaDES)  ## should automatically download all packages in the SpaDES family and their dependencies\n\n## decide where you're working\nmainDir <- \".\"\n\nsetPaths(cachePath = file.path(mainDir, \"cache\"),\n         inputPath = file.path(mainDir, \"inputs\"),\n         modulePath = file.path(mainDir, \"modules\"),\n         outputPath = file.path(mainDir, \"outputs\"))\n\ngetPaths() ## check that this is what you wanted\n\n## Let's create a self-contained module that will simulate the species' abundance for any given period of time and frequency.\nif (!dir.exists(file.path(getPaths()$modulePath, \"speciesAbundance\"))) {\n  newModule(name = \"speciesAbundance\", path = getPaths()$modulePath)\n}"},{"path":"part1.html","id":"general-module-structure-speciesabundance-module","chapter":"1 Introducing SpaDES with a dummy ecological model","heading":"1.2.2 General module structure: speciesAbundance module","text":"module template contains essential components module, examples, may seem overwhelming first.\n’ll go step step (although necessarily following order script).\nmodule script can divided 4 parts:[Defining Module]: module defined, .e., module’s metadata (e.g. module author(s), time units, basic parameters, general inputs outputs, etc.);[Events event functions]: “actions” (events) executed module (.e. species reproduction, plotting, saving parameters) - simply put, module ;[Scheduling Events]: SpaDES schedules event going happen - order (e.g. simulation, SpaDES plot graph) - simply put, module ;[Additional module functions]: additional functions needed (e.g. used keep coding module clear straightforward possible);first thing note user need manually run code inside module’s .R script.\nfunction simInit() sets simulation.\nsee see later detail.","code":""},{"path":"part1.html","id":"defining-the-module","chapter":"1 Introducing SpaDES with a dummy ecological model","heading":"1.2.2.1 Defining the Module","text":"first section script defines module’s metadata.\nallows defining module’s author, keywords, required packages module(s) versions, also parameters (default values) input objects module requires, output objects creates.Although dummy module example requires true input data, define template raster R “input” expectsInput function, provide default object .inputObjects (see ).\noutputs, produces list abundance rasters (produced abundanceSim event).\ndefine output thecreatesOutput function.Note removed several parameters come template created newModule function, needed example.distinguish input output objects context module, good rule thumb inputs sim$... objects appear first time (module events) right-hand side <-, whereas output parameters sim$... objects appear first time left-hand side <-.\nAnother way explaining objects illustrated Fig.\n1.1:\nFigure 1.1: Inputs outputs SpaDES: Object comes outside module (e.g. internet URL, data , .inputObjects), Module Z produces object C. objects serve inputs Module Y, return produce outputs objects B D, respectivelly objects C. Module Z uses simple function internally create object C, doesn’t inputs, dummy example.\nexception rule default input objects created .inputObjects function (see [.inputObjects function]) simInit call.defined speciesAbundance module:Note package versions define depend ones installed computer.\ntake care change accordingly.\nSpaDES package version suggested template reflects version computer.rest script defines events sequences module - remember SpaDES = Spatial Discrete Event Simulator - events ./!\\ ATTENTION /!\\defineModule() intended run directly user – run internally simInit() call (see Simulation setup “global” script). words, don’t run part module’s code directly session; run simInit() module listed modules argument.","code":"\ndefineModule(sim, list(\n  name = \"speciesAbundance\",\n  description = \"\",\n  keywords = \"\",\n  authors = person(\"Me\", email = \"me@example.com\", role = c(\"aut\", \"cre\")),\n  childModules = character(0),\n  version = list(speciesAbundanceData = \"0.0.0.9000\"),\n  timeframe = as.POSIXlt(c(NA, NA)),\n  timeunit = \"year\",\n  citation = list(\"citation.bib\"),\n  documentation = deparse(list(\"README.txt\", \"speciesAbundance.Rmd\")),\n  reqdPkgs = list(\"PredictiveEcology/SpaDES.core@development (>=1.0.10.9000)\",\n                  \"raster\", \"quickPlot\"),\n  parameters = bindrows(\n    #defineParameter(\"paramName\", \"paramClass\", value, min, max, \"parameter description\"),\n    defineParameter(\"simulationTimeStep\", \"numeric\", 1, NA, NA, \n                    \"This describes the simulation time step interval\"),\n    defineParameter(\".plotInitialTime\", \"numeric\", 1, NA, NA,\n                    \"Describes the simulation time at which the first plot event should occur.\"),\n    defineParameter(\".plotInterval\", \"numeric\", 1, NA, NA,\n                    \"Describes the simulation time interval between plot events.\")\n  ),\n  inputObjects = bindrows(\n    # expectsInput(\"objectName\", \"objectClass\", \"input object description\", sourceURL, ...),\n    expectsInput(\"r\", objectClass = \"RasterLayer\", desc = \"Template raster\")\n  ),\n  outputObjects = bindrows(\n    #createsOutput(\"objectName\", \"objectClass\", \"output object description\", ...),\n    createsOutput(\"abundRasters\", \"list\", \"List of layers of species abundance at any given year\")\n  )\n))"},{"path":"part1.html","id":"events-and-event-functions","chapter":"1 Introducing SpaDES with a dummy ecological model","heading":"1.2.2.2 Events and event functions","text":"Module events defined scheduled doEvent.<module name> function (example, doEvent.speciesAbundance function; see [Scheduling events]. Since interested simulating plotting species abundances, removed unnecessary events script kept: initialisation (init), abundance simulation event (SimulAbund) plotting event (abundPlot).\nevents can execute one functions.Event functions (actual R functions) mustn’t confused event names, names events appearing doEvent.<module name>./!\\ ATTENTION /!\\ Event functions take one argument, sim (SpaDES.core::simList object stores objects, modules, functions, etc., simulation; see ?simList) event functions always () return sim (using return(invisible(sim))).","code":""},{"path":"part1.html","id":"initialisation-event-function","chapter":"1 Introducing SpaDES with a dummy ecological model","heading":"1.2.2.2.1 Initialisation event function","text":"initialisation event function (, abundanceInit) can seen starting point module.\nUnlike init event, must always present, function need exist (see [Scheduling events]) can whatever name want.Usually, function pre-simulation steps need executed .\ndummy example, creates template raster storage list species abundance outputs (also rasters).\nNotice argument abundanceInit sim simList object, also output.","code":"\nabundanceInit <- function(sim) {\n  ## create storage list of species abundance\n  sim$abundRasters <- list()\n  \n  return(invisible(sim))\n}"},{"path":"part1.html","id":"abundance-simulation-event-function","chapter":"1 Introducing SpaDES with a dummy ecological model","heading":"1.2.2.2.2 Abundance simulation event function","text":"function abundanceSim core event function module, species abundances generated via event.\nNotice instead -loop, abundanceSim runs abundance_model function (define separately ) stores outputs sim$abundRaster object.\nNotice well use time(sim) identifier list slots outputs stored (see ?SpaDES.core::time)., sole argument output event function sim object.abundanceSim function called Event1 template.","code":"\nabundanceSim <- function(sim) {\n  ## Generate species abundances - our \"simulation\"\n  sim$abundRasters[[as.character(time(sim))]] <- abundance_model(ras = sim$r)\n  \n  return(invisible(sim))\n}"},{"path":"part1.html","id":"plotting-event-function","chapter":"1 Introducing SpaDES with a dummy ecological model","heading":"1.2.2.2.3 Plotting event function","text":"Finally, created abundancePlot event function plot species abundance rasters produced abundanceSim event function.\n, sole argument output function sim.abundancePlot function called plotFun template.","code":"\nabundancePlot <- function(sim) {\n  ## plot abundances\n  plotTitle <- paste(\"Species abundance\\nat time\",\n                     names(sim$abundRasters)[length(sim$abundRasters)])\n  abundPlot <- sim$abundRasters[[length(sim$abundRasters)]] \n  Plot(abundPlot, \n       title = plotTitle, \n       new = TRUE, addTo = \"abundPlot\")\n  \n  return(invisible(sim))\n}"},{"path":"part1.html","id":"scheduling-events","chapter":"1 Introducing SpaDES with a dummy ecological model","heading":"1.2.2.3 Scheduling events","text":"order module events executed determined doEvent.<module name> function.\nfunction also defines events happens .\nswitch function executes event (init, SimulAbund, abundPlot) events schedule .\nTwo things particular importance:init event mandatory. event whose name changed removed (even execute event functions). events optional can renamed. SpaDES searches executes modules’ init events automatically. Note names event functions executed init can name: changed Init function name (suggested template) abundanceInit.Events schedule . exception init, schedules first time events executed (even particular event occurs end simulation).usually easier fill doEvent.<module name> function defined event functions ().\ninstance, know plotting occur generation species abundances, abundPlot scheduled occur SimulAbund event, changing event priority (see ?priority).configured doEvent.speciesAbundance function:suggest look ?base::switch fully understand behaviour.\nshort, base::switch tells R execute (switch) different code depending value EXPR (eventType).\n, means behaviour function doEvent.speciesAbundance change depending present eventType.\nneed define behaviour event type defined module - namely, functions executed whether schedule future events scheduleEvent.","code":"\ndoEvent.speciesAbundance = function(sim, eventTime, eventType, debug = FALSE) {\n  switch(\n    eventType,\n    init = {\n      ## do stuff for this event\n      sim <- abundanceInit(sim)\n      \n      ## schedule future event(s)\n      sim <- scheduleEvent(sim, eventTime = start(sim), moduleName = \"speciesAbundance\", \n                           eventType = \"SimulAbund\")\n      sim <- scheduleEvent(sim, eventTime = P(sim)$.plotInitialTime, \n                           moduleName = \"speciesAbundance\", eventType = \"abundPlot\",\n                           eventPriority = .normal()+0.5)\n    },\n    SimulAbund = {\n      ## do stuff for this event\n      sim <- abundanceSim(sim)\n      \n      ## schedule future event(s)\n      sim <- scheduleEvent(sim, eventTime = time(sim) + P(sim)$simulationTimeStep, \n                           moduleName = \"speciesAbundance\", eventType = \"SimulAbund\")\n    },\n    abundPlot = {\n      ## do stuff for this event\n      sim <- abundancePlot(sim)\n      \n      ## schedule future event(s)\n      sim <- scheduleEvent(sim, eventTime = time(sim) + P(sim)$.plotInterval, \n                           moduleName = \"speciesAbundance\", eventType = \"abundPlot\", \n                           eventPriority = .normal()+0.5)\n    },\n    warning(paste(\"Undefined event type: '\", current(sim)[1, \"eventType\", with = FALSE],\n                  \"' in module '\", current(sim)[1, \"moduleName\", with = FALSE], \"'\", sep = \"\"))\n  )\n  return(invisible(sim))\n}"},{"path":"part1.html","id":"init","chapter":"1 Introducing SpaDES with a dummy ecological model","heading":"1.2.2.3.1 init","text":"first event , obviously, init - name changed.init run initialisation event function (abundanceInit) - optional - schedule first occurrence events (, abundance simulation, SimulAbund, plotting, abundPlot, events).\ninit event SpaDES always executes start simulation, events scheduled init, events executed init.\nNotice two things:SimulAbund event scheduled start(sim) (.e. first time step simulation), means run init event, still “year”.init schedules first plotting event executed time defined .plotInitialTime parameter, stored sim object (obtained using SpaDES.core::P(sim)), slightly lower event priority eventPriority = .normal()+0.5 (see ?priority).","code":""},{"path":"part1.html","id":"simulabund","chapter":"1 Introducing SpaDES with a dummy ecological model","heading":"1.2.2.3.2 SimulAbund","text":"SimulAbund event defined next.\nevent used called event1 template, changed name informative .\ncore event module, species abundances generated via event function abundanceSim.even also schedules occur frequency defined simulationTimeStep parameter","code":""},{"path":"part1.html","id":"abundplot","chapter":"1 Introducing SpaDES with a dummy ecological model","heading":"1.2.2.3.3 abundPlot","text":"Finally, schedule plotting event, abundPlot (used called plot template).\nSimilarly SimulAbund event, executes event function (abundancePlot) reschedules .\nimportant difference uses .plotInterval parameter, instead simulationTimeStep, rescheduling .\nway, future events occur depending time step plot interval parameters defined global script (default values defined metadata section).","code":""},{"path":"part1.html","id":"inputobjects-function","chapter":"1 Introducing SpaDES with a dummy ecological model","heading":"1.2.2.4 .inputObjects function","text":"end template .R script defines function called .inputObjects.\ndeveloper include code provide defaults input objects required module.\nideal place produce R template raster, instead abundanceInit, allow future user (module) provide R template (e.g. another study area).\n, R supplied user another module overridden execution init event.Default inputs supplied way allows defaults overridden user (supplying named list objects via simInit(objects = ...)) modules produce objects.\n, rely SpaDES.core::suppliedElsewhere function, detects given object already supplied user supplied another module.Note suppliedElsewhere know whether module supplies object executed present module, blind module scheduling order.\nmodules relatively simple approximately linear flow interdependencies, SpaDES usually able tell order modules need executed.\ncomplex cases good idea pass vector module names simInit(loadOrder = ...) definining order module execution.’s example (commented instructions deleted):chose supply default R .inputObjects, remove creation abundanceInit function add metadata input.\ndone , abundanceInit creates storage list outputs:good practice provide default input objects remaining modules, can work stand-alone.\ndone ./!\\ ATTENTION /!\\ R becomes input defaults must added module metadata inside expectsInput call.","code":"\n.inputObjects <- function(sim) {\n  if (!suppliedElsewhere(\"r\")) {\n    ## make template raster if not supplied elsewhere.\n    sim$r <- raster(nrows = 100, ncols = 100, xmn = -50, xmx = 50, ymn = -50, ymx = 50)\n  }\n  return(invisible(sim))\n}\nabundanceInit <- function(sim) {\n  ## create storage list of species abundance\n  sim$abundRasters <- list()\n  \n  return(invisible(sim))\n}"},{"path":"part1.html","id":"additional-module-functions","chapter":"1 Introducing SpaDES with a dummy ecological model","heading":"1.2.2.5 Additional module functions","text":"Events can also rely functions can either sourced scripts, defined end module script (e.g. usually .inputObjects, although order irrelevant).\ncase species abundances generator function, coded separate script called abundance_model.R.\nScripts accessory functions like go module’s R/ folder.Functions also accompanied metadata.\nprovide description function, parameters, returning value package functions relies using roxygen2 documentation style (indicated #').","code":"\n#' Accessory function to speciesAbundance module\n#' \n#' @param ras a raster layer used as template.\n#' @return a fake abundance raster generated as a Gaussian map with scale = 100 and variance = 0.01\n#' @import SpaDES.tools gaussMap \nabundance_model <- function(ras) {\n  abund_ras <- gaussMap(ras, scale = 100, var = 0.01) \n  return(abund_ras)\n}"},{"path":"part1.html","id":"creating-and-adding-additional-modules-the-temperature-module","chapter":"1 Introducing SpaDES with a dummy ecological model","heading":"1.2.3 Creating and adding additional modules: the temperature module","text":"order modules first executed (.e. init events) can automatically determined inter-module dependencies (.e. module inputs outputs modules).\ninter-module dependencies order determined order modules listed Example1_DummyModel.R script, via simInit(loadOrder = ...) argument.init event, module execution order follows order events.\nmeans module’s events can scheduled another module’s events within simulation time step.\nHowever, keep mind can make simulation flow hard follow, debug change additional modules added.second module created generates yearly temperatures.\nApart different objects functions names, module also template raster R required input object.\nRecall R created .inputObjects speciesAbundance module.\ntwo modules linked, object created twice suppliedElsewhere(\"r\") tell temperature module R supplied another module.\nmay appear trivial example, can extremely useful inuts heavy objects require lengthy computations produces.set temperature.R script looks like:, added accessory temperature_model function separate script R/temperature_model.R:","code":"\n\n# Everything in this file gets sourced during simInit, and all functions and objects\n# are put into the simList.\ndefineModule(sim, list(\n  name = \"temperature\",\n  description = \"Temperature simulator\",\n  keywords = c(\"temperature\", \"gaussian\", \"spatial\"),\n  authors = person(\"Me\", email = \"me@example.com\", role = c(\"aut\", \"cre\")),\n  childModules = character(0),\n  version = list(speciesAbundanceData = \"0.0.0.9000\"),\n  timeframe = as.POSIXlt(c(NA, NA)),\n  timeunit = \"year\",\n  citation = list(\"citation.bib\"),\n  documentation = list(\"README.txt\", \"temperature.Rmd\"),\n  reqdPkgs = list(\"PredictiveEcology/SpaDES.core@development (>=1.0.10.9000)\",\n                  \"raster\"),\n   parameters = bindrows(\n    #defineParameter(\"paramName\", \"paramClass\", value, min, max, \"parameter description\"),\n    defineParameter(\"simulationTimeStep\", \"numeric\", 1, NA, NA, \n                    \"This describes the simulation time step interval\"),\n    defineParameter(\".plotInitialTime\", \"numeric\", 1, NA, NA, \n                    \"This describes the simulation time at which the first plot event should occur\"),\n    defineParameter(\".plotInterval\", \"numeric\", 1, NA, NA,\n                    \"This describes the simulation time interval between plot events\")\n  ),\n  inputObjects = bindrows(\n    #expectsInput(\"objectName\", \"objectClass\", \"input object description\", sourceURL, ...),\n    expectsInput(\"r\", \"RasterLayer\", \"Template raster\")\n  ),\n  outputObjects = bindrows(\n    #createsOutput(\"objectName\", \"objectClass\", \"output object description\", ...),\n    createsOutput(\"tempRasters\",  \"list\", \"List of raster layers of temperature at any given year\")\n  )\n))\n\n## event types\n#   - type `init` is required for initialiazation\n\ndoEvent.temperature = function(sim, eventTime, eventType, debug = FALSE) {\n  switch(\n    eventType,\n    init = {\n      ## do stuff for this event\n      sim <- temperatureInit(sim)\n      \n      ## schedule future event(s)\n      sim <- scheduleEvent(sim, eventTime = start(sim), moduleName = \"temperature\", eventType = \"SimulTemp\")\n      sim <- scheduleEvent(sim, eventTime = P(sim)$.plotInitialTime, moduleName = \"temperature\", \n                           eventType = \"tempPlot\", eventPriority = .normal() + 0.5)\n    },\n    SimulTemp = {\n      ## do stuff for this event\n      sim <- temperatureSim(sim)\n      \n      ## schedule future event(s)\n      sim <- scheduleEvent(sim, eventTime = time(sim) + P(sim)$simulationTimeStep, moduleName = \"temperature\", \n                           eventType = \"SimulTemp\")\n    },\n    tempPlot = {\n      ## do stuff for this event\n      sim <- temperaturePlot(sim)\n\n      ## schedule future event(s)\n      sim <- scheduleEvent(sim, eventTime = time(sim) + P(sim)$.plotInterval, moduleName = \"temperature\", \n                           eventType = \"tempPlot\", eventPriority = .normal() + 0.5)\n    },\n    warning(paste(\"Undefined event type: '\", current(sim)[1, \"eventType\", with = FALSE],\n                  \"' in module '\", current(sim)[1, \"moduleName\", with = FALSE], \"'\", sep = \"\"))\n  )\n  return(invisible(sim))\n}\n\n## This is the 'init' event:\ntemperatureInit <- function(sim) {\n  ## create storage list of species temperature\n  sim$tempRasters <- list()\n  \n  return(invisible(sim))\n}\n\n## This is the temperature simulation event function\ntemperatureSim <- function(sim) {\n  ## Generate temperature - our \"updated data\"\n  sim$tempRasters[[as.character(time(sim))]] <- temperature_model(ras = sim$r)\n  \n  return(invisible(sim))\n}\n\n## This is the plotting event funciton\ntemperaturePlot <- function(sim) {\n  ## plot temperature\n  plotTitle <- paste(\"Temperature\\nat time\",\n                      names(sim$tempRasters)[length(sim$tempRasters)])\n  tempPlot <- sim$tempRasters[[length(sim$tempRasters)]] \n  Plot(tempPlot, \n       title = plotTitle, \n       new = TRUE, addTo = \"tempPlot\")\n  \n  return(invisible(sim))\n}\n\n.inputObjects <- function(sim) {\n  if (!suppliedElsewhere(\"r\")) {\n    ## make template raster if not supplied elsewhere.\n    sim$r <- raster(nrows = 100, ncols = 100, xmn = -50, xmx = 50, ymn = -50, ymx = 50)\n  }\n  return(invisible(sim))\n}\n#' Accessory function to temperature module\n#' \n#' @param ras a raster layer used as template.\n#' @return a fake temperature raster generated as a Gaussian map with scale = 100 and variance = 0.01\n#' @import SpaDES.tools gaussMap \n\ntemperature_model <- function(ras) {\n  temp_ras <- gaussMap(ras, scale = 100, var = 0.01) \n  return(temp_ras)\n}"},{"path":"part1.html","id":"modules-that-depend-on-other-modules-the-speciestemplm-module","chapter":"1 Introducing SpaDES with a dummy ecological model","heading":"1.2.4 Modules that depend on other modules: the speciesTempLM module","text":"third last module, speciesTempLM, used run statistical analysis year, abundances temperatures generated (species Temperature Linear Model).\nHence, depend outputs speciesAbundance temperature modules.interest keeping statistical analysis separate module lies fact allows us easily swap compare different statistical models analyse data want .also allows greater flexibility comes statistical model supposed run.\nexample, may want fit every 5 years, instead every year, using previous 5 years data.\nstatistical analysis contained module, don’t need change module scripts order make changes.Finally, draw attention differences module’s script see :frequency statistical analysis (correspondent plots) determined parameter statsTimestep.\nparameter also determines number data years used fit linear model.\nstatsTimestep = 5, statistical analysis use precedent 5 years data including year event running (total 6 years data);frequency statistical analysis (correspondent plots) determined parameter statsTimestep.\nparameter also determines number data years used fit linear model.\nstatsTimestep = 5, statistical analysis use precedent 5 years data including year event running (total 6 years data);module requires inputs defaults .inputObjects.\nspecified inputObjects part defineModule - notice ’ve respected names, classes description objects come speciesAbundance temperature modules;module requires inputs defaults .inputObjects.\nspecified inputObjects part defineModule - notice ’ve respected names, classes description objects come speciesAbundance temperature modules;two additional functions separate script (R/linear_model_functions.R): function fitting linear model plotting function.two additional functions separate script (R/linear_model_functions.R): function fitting linear model plotting function.full module script.\nNotice future events scheduled P(sim)$statsTimestep + 0.1, force statistical analyses occur abundance temperature rasters ready.script accessory functions:","code":"\n\n# Everything in this file gets sourced during simInit, and all functions and objects\n# are put into the simList.\ndefineModule(sim, list(\n  name = \"speciesTempLM\",\n  description = \"Statistical analysis of species ~ temperature relationships using LM\",\n  keywords = c(\"linear model\"),\n  authors = person(\"Me\", email = \"me@example.com\", role = c(\"aut\", \"cre\")),\n  childModules = character(0),\n  version = list(speciesAbundanceData = \"0.0.0.9000\"),\n  timeframe = as.POSIXlt(c(NA, NA)),\n  timeunit = \"year\",\n  citation = list(\"citation.bib\"),\n  documentation = list(\"README.txt\", \"speciesTempLM.Rmd\"),\n  reqdPkgs = list(\"PredictiveEcology/SpaDES.core@development (>=1.0.10.9000)\",\n                  \"raster\", \"ggplot2\", \"data.table\", \"reshape2\"),\n   parameters = bindrows(\n    #defineParameter(\"paramName\", \"paramClass\", value, min, max, \"parameter description\"),\n    defineParameter(\"statsTimestep\", \"numeric\", 1, NA, NA, \"This describes the how often the statitiscal analysis will be done\")\n  ),\n  inputObjects = bindrows(\n    #expectsInput(\"objectName\", \"objectClass\", \"input object description\", sourceURL, ...),\n    expectsInput(\"abundRasters\", \"list\", \"List of raster layers of species abundance at any given year\"),\n    expectsInput(\"tempRasters\", \"list\", \"List of raster layers of temperature at any given year\")\n  ),\n  outputObjects = bindrows(\n    #createsOutput(\"objectName\", \"objectClass\", \"output object description\", ...),\n    createsOutput(\"outputdata\", \"list\", \"List of dataframes containing species abundances and temperature values per pixel\"),\n    createsOutput(\"outputLM\", \"list\", \"List of output yearly LMs (abundance ~ temperature)\"),\n    createsOutput(\"yrs\", \"numeric\", \"Vector of years used for statistical analysis\")\n  )\n))\n\n## event types\n#   - type `init` is required for initialiazation\n\ndoEvent.speciesTempLM = function(sim, eventTime, eventType, debug = FALSE) {\n  switch(\n    eventType,\n    init = {\n      ## do stuff for this event\n      sim <- statsInit(sim)\n\n      ## schedule future event(s)\n      sim <- scheduleEvent(sim, P(sim)$statsTimestep, \"speciesTempLM\", \n                           \"stats\", eventPriority = .normal() + 2)\n      sim <- scheduleEvent(sim, P(sim)$statsTimestep, \"speciesTempLM\", \n                           \"statsPlot\", eventPriority = .normal() + 2.5)\n    },\n    stats = {\n      ## do stuff for this event\n      sim <- statsAnalysis(sim)\n      \n      ## schedule future event(s)\n      sim <- scheduleEvent(sim, time(sim) + P(sim)$statsTimestep, \"speciesTempLM\", \n                           \"stats\", eventPriority = .normal() + 2)\n    },\n    statsPlot = {\n      ## do stuff for this event\n      sim <- statsPlot(sim)\n      \n      ## schedule future event(s)\n      sim <- scheduleEvent(sim, time(sim) + P(sim)$statsTimestep, \"speciesTempLM\",\n                           \"statsPlot\", eventPriority = .normal() + 2.5)\n    },\n    warning(paste(\"Undefined event type: '\", current(sim)[1, \"eventType\", with = FALSE],\n                  \"' in module '\", current(sim)[1, \"moduleName\", with = FALSE], \"'\", sep = \"\"))\n  )\n  return(invisible(sim))\n}\n\n## template initialization\nstatsInit <- function(sim) {\n  ## create outputs storage lists\n  sim$outputLM <- list()\n  \n  return(invisible(sim))\n}\n\n## Statistical analysis event\nstatsAnalysis <- function(sim) {\n  ## get all species abundances data available\n  abundData <- data.table(getValues(stack(sim$abundRasters)))\n  abundData[, pixID := 1:nrow(abundData)]\n  abundData <- melt.data.table(abundData, id.var = \"pixID\",\n                               variable.name = \"year\", value.name = \"abund\")\n  abundData[, year := as.numeric(sub(\"X\", \"\", year))]\n  \n  ## get all temperature data available\n  tempData <- data.table(getValues(stack(sim$tempRasters)))\n  tempData[, pixID := 1:nrow(tempData)]\n  tempData <- melt.data.table(tempData, id.var = \"pixID\",\n                               variable.name = \"year\", value.name = \"temp\")\n  tempData[, year := as.numeric(sub(\"X\", \"\", year))] \n  \n  ## merge per year  \n  setkey(abundData, pixID, year)\n  setkey(tempData, pixID, year)\n  sim$outputdata <- abundData[tempData]\n  \n  sim$outputLM[[as.character(time(sim))]] <- linearModel(Data = sim$outputdata)\n  return(invisible(sim))\n}\n\n## Plotting event\nstatsPlot <- function(sim) {\n  model <- sim$outputLM[[as.character(time(sim))]]\n  \n  modelPlot <- ggplot(sim$outputdata) + \n    geom_point(aes(x = temp, y = abund)) +\n    geom_abline(intercept = model$coefficients[\"(Intercept)\"], \n                slope = model$coefficients[\"temp\"], size = 2, col = \"blue\") +\n    theme_bw() +\n    labs(x = \"Temp.\", y = \"Species abundance\")\n  \n  plotTitle <- paste(\"abundance ~ temperature\\n\",\n                     \"years\", range(sim$outputdata$year)[1],\n                     \"to\", range(sim$outputdata$year)[2])\n  Plot(modelPlot, \n       title = plotTitle, \n       new = TRUE, addTo = \"modelPlot\")\n  \n  return(invisible(sim))\n}\n\n.inputObjects <- function(sim) {\n  # Any code written here will be run during the simInit for the purpose of creating\n  # any objects required by this module and identified in the inputObjects element of defineModule.\n  # This is useful if there is something required before simulation to produce the module\n  # object dependencies, including such things as downloading default datasets, e.g.,\n  # downloadData(\"LCC2005\", modulePath(sim)).\n  # Nothing should be created here that does not create a named object in inputObjects.\n  # Any other initiation procedures should be put in \"init\" eventType of the doEvent function.\n  # Note: the module developer can check if an object is 'suppliedElsewhere' to\n  # selectively skip unnecessary steps because the user has provided those inputObjects in the\n  # simInit call, or another module will supply or has supplied it. e.g.,\n  # if (!suppliedElsewhere('defaultColor', sim)) {\n  #   sim$map <- Cache(prepInputs, extractURL('map')) # download, extract, load file from url in sourceURL\n  # }\n  \n  #cacheTags <- c(currentModule(sim), \"function:.inputObjects\") ## uncomment this if Cache is being used\n  dPath <- asPath(getOption(\"reproducible.destinationPath\", dataPath(sim)), 1)\n  message(currentModule(sim), \": using dataPath '\", dPath, \"'.\")\n  \n  # ! ----- EDIT BELOW ----- ! #\n  \n  # ! ----- STOP EDITING ----- ! #\n  return(invisible(sim))\n}\n## Accessory functions to speciesTempLM module\n\n#' Accessory function to speciesTempLM module that calculates a\n#'  linear regression between species abundances and temperature\n#'\n#' @param Data a data.frame or data.table that contains an \\code{abund}\n#'   column and a \\code{temp} column with abundance and temperature values \n#'   in each location, respectively.\n#' @return a linear model (\\code{lm}) object fitted with the formula:\n#'  \\code{abund ~ temp}\n\nlinearModel <- function(Data){\n  lm1 <- lm(abund ~ temp, data = Data)\n  return(lm1)\n}"},{"path":"part1.html","id":"simulation","chapter":"1 Introducing SpaDES with a dummy ecological model","heading":"1.2.5 Simulation","text":"","code":""},{"path":"part1.html","id":"simulation-setup-in-a-global-script","chapter":"1 Introducing SpaDES with a dummy ecological model","heading":"1.2.5.1 Simulation setup in a “global” script","text":"can now go back Example1_DummyModel.R script set simulation .function simInit needs arguments listing simulation folder directories, parameters, simulation times, modules , optionally, input objects supplied user.\nsimInit prepare simulation object can later run spades function:first list, modules, contains modules want activate.first list, modules, contains modules want activate.times named list containing start end times simulation time units ’re working (“start” “end” list names. thus defines length simulation. important start ending times defined decimals, SpaDES allows decomposing time units smaller fractions.times named list containing start end times simulation time units ’re working (“start” “end” list names. thus defines length simulation. important start ending times defined decimals, SpaDES allows decomposing time units smaller fractions.parameters named list named lists, containing parameters values passed module.\nNote module metadata () contain default parameter values, pass parameters want change respect defaults.\ninstance, .plotInterval used defined speciesAbundance temperature modules, passed simInit function want use default value.\ndeveloper providing reproducible example, may also chose list important useful parameters, even value default.\nchose list .plotInitialTime (parameter used defined speciesAbundance temperature modules), provide default value (experimenting changing value Example1_DummyModel.R).parameters named list named lists, containing parameters values passed module.\nNote module metadata () contain default parameter values, pass parameters want change respect defaults.\ninstance, .plotInterval used defined speciesAbundance temperature modules, passed simInit function want use default value.\ndeveloper providing reproducible example, may also chose list important useful parameters, even value default.\nchose list .plotInitialTime (parameter used defined speciesAbundance temperature modules), provide default value (experimenting changing value Example1_DummyModel.R).paths contains folder directory paths set earlier.paths contains folder directory paths set earlier.Finally, highlight simInit also executes .inputObjects functions, schedules init events, execute :","code":"\n## list the modules to use\nsimModules <- list(\"speciesAbundance\", \"temperature\", \"speciesTempLM\")\n\n## Set simulation and module parameters\nsimTimes <- list(start = 1, end = 10, timeunit = \"year\")\nsimParams <- list(\n  speciesAbundance = list(simulationTimeStep = 1, \n                          .plotInitialTime = 1),\n  temperature = list(simulationTimeStep = 1, \n                     .plotInitialTime = 1),\n  speciesTempLM = list(statsTimestep = 5)\n)\n\n## make a list of directory paths\nsimPaths <- getPaths()\n\n## Simulation setup\nmySim <- simInit(times = simTimes, params = simParams, \n                 modules = simModules, paths = simPaths)\nevents(mySim)"},{"path":"part1.html","id":"checking-the-simulation-setup","chapter":"1 Introducing SpaDES with a dummy ecological model","heading":"1.2.5.2 Checking the simulation setup","text":"starting simulations check modules linked correctly.Module diagrammoduleDiagram useful function shows module inter-dependencies network diagram.\ndirection arrows indicates output input flow.\ncan see speciesAbundance temperature inputs (specifically R raster) supplied external source (“INPUT”) - user .inputObjects.\nWhereas inputs speciesTempLM module outputs speciesAbundance temperature modules.Object diagramobjectDiagram provides another way checking module linkages.\nexplicitly shows module inter-dependencies depicting objects establish links modules.","code":"\nmoduleDiagram(mySim)\nobjectDiagram(mySim)"},{"path":"part1.html","id":"running-spades","chapter":"1 Introducing SpaDES with a dummy ecological model","heading":"1.2.5.3 Running SpaDES","text":"run simulation using spades function, takes output simInit, executes already scheduled init events, schedule remainder events.\npassed debug = TRUE spades prints events executed.\ncase something fails, helps diagnosing issue occurred.\nFigure 1.2: Simulation plots: Final plot simulation\nsuggest experimenting changing parameter values trying create add modules explore SpaDES flexibility.\ncomplex project gets, advantageous use SpaDES turn modules , swapping modules run, e.g., different statistical analyses, include different data.","code":"\n## run simulation\ndev() # on Windows and Mac, this opens external device if using Rstudio, it is faster\nclearPlot()\nmySim2 <- spades(mySim, debug = TRUE)"},{"path":"part1.html","id":"additional-notes","chapter":"1 Introducing SpaDES with a dummy ecological model","heading":"1.2.6 Additional notes","text":"SpaDES extremely powerful package, whose potential goes well beyond discussed dummy example.\nwant explore , recommend following Part 2 realistic (still simple) SpaDES application.Also, go SpaDES webpage find information platform, well upcoming workshops publications Predictive Ecology Github repository see SpaDES modules SpaDES-related packages maintain.Happy SpaDESing!","code":""},{"path":"part2.html","id":"part2","chapter":"2 A more realistic example of SpaDES","heading":"2 A more realistic example of SpaDES","text":"Authors: Ceres Barros, Alex M. ChubatyIn 1 guide, described create new SpaDES modules, different components, link different modules set run simulation., assume familiar steps, go showing important SpaDES features facilitate many steps common ecological modelling exercises.\nsake simplicity, focus example projecting species’ distribution function climate covariates.\nYet, true power SpaDES evident using complex dynamic simulation models parameterized using large datasets ran across large spatial areas.example broken four main parts: 1) Module creation coding; 2) Running model; 3) Caching; 4) Best practices.\nmean cover caching best practices full, topics extensive, highlights essentials SpaDES experience.","code":""},{"path":"part2.html","id":"the-example-projecting-species-distribution-shifts-under-climate-change","chapter":"2 A more realistic example of SpaDES","heading":"2.1 The example: projecting species distribution shifts under climate change","text":"Species distribution models (SDMs) widely used ecology predict species presences absences across landscape may change changing environmental conditions.\nresult, several R packages built mind e.g. dismo Hijmans et al. (2021); biomod2 Thuiller et al. (2021)] many ecologists analyses exclusively R.Often, analyses run given set species, baseline projected environmental conditions, researchers R scripts (maybe just one longer script) load data R, necessary pre-processing steps, fit models run species distribution projections.\nusefulness SpaDES comes want automated standardized workflow can easily updated new data adapted new algorithms.\nSpaDES provides common standard modular approach modelling facilitates expanding, debugging sharing code, also various tools bring many well-known best practices computer- data-science workflows (including reproducible, modular workflows, caching), realm ecological modelling, can used non-computer-scientists minimal learning.\nSDM project means updating data algorithms, automating iterative forecasting become easier less prone errors.\nSpaDES modules open shared, also expands potential pool users can help improve code.","code":""},{"path":"part2.html","id":"module-creation-and-coding","chapter":"2 A more realistic example of SpaDES","heading":"2.2 Module creation and coding","text":"mind, example created three modules source pre-process data (‘data modules’) module fits SDM iteratively forecasts species distributions (call ‘simulation module’, although simulation involves predicting statistical model).\nidea , instance, provide different data sources one data modules update parts simulation affected change (.e. presumably data module steps affected).\n, develop second simulation module using different SDM approach swap two modules inspect provides better predictions.data modules speciesAbundanceData climateData.\nsimulation module projectSpeciesDist.\nstart creating .R script set control simulation.\nexample script called Example2_SDMMaxent.R.\nscript begins lines code ensure necessary packages installed loaded (see Reproducible package installation).\ndefines necessary folder directories simulation creates modules modules/ folder:Notice protect newModule call statement first detects whether module directory exists already.\nnecessary prevent overwriting existing modules script run second time location (see Protect others common mistakes/problems).setPaths create project folder directories case exist (overwriting occurs case ).Finally, note load R packages yet, later use Require make sure module dependencies installed running simulation (see Reproducible package installation).\nRequire may attempt install missing packages installing packages done clean R session, load packages installation steps complete.","code":"\n## Get necessary R packages, but don't load any\nif (!require(\"Require\")) install.packages(\"Require\")\nRequire::Require(\"PredictiveEcology/SpaDES.install@development\", require = FALSE)\nRequire::Require(\"PredictiveEcology/SpaDES.experiment@development\", require = FALSE)\nSpaDES.install::installSpaDES(ask = TRUE)\n\n## decide where you're working\nmainDir <- \".\"\n\n# mainDir <- getwd()\nSpaDES.core::setPaths(cachePath = file.path(mainDir, \"cache\"),\n                      inputPath = file.path(mainDir, \"inputs\"),\n                      modulePath = file.path(mainDir, \"modules\"),\n                      outputPath = file.path(mainDir, \"outputs\"))\n\nsimPaths <- SpaDES.core::getPaths() ## check that this is what you wanted\n\n## Let's create a self-contained module that will simulate the species' abundance for any given period of time and frequency.\nif (!dir.exists(file.path(simPaths$modulePath, \"speciesAbundanceData\"))){\n  SpaDES.core::newModule(name = \"speciesAbundanceData\", path = simPaths$modulePath)\n}\n\nif (!dir.exists(file.path(simPaths$modulePath, \"climateData\"))){\n  SpaDES.core::newModule(name = \"climateData\", path = simPaths$modulePath)\n}\n\nif (!dir.exists(file.path(simPaths$modulePath, \"projectSpeciesDist\"))){\n  SpaDES.core::newModule(name = \"projectSpeciesDist\", path = simPaths$modulePath)\n}"},{"path":"part2.html","id":"data-modules","chapter":"2 A more realistic example of SpaDES","heading":"2.2.1 Data modules","text":"next two sections show two data modules .R scripts.\nassume already familiar different parts module .R script; , see Part 1.\ndiscuss module .Rmd files, document module detail (see [Module documentation – module .Rmd]).","code":""},{"path":"part2.html","id":"speciesabundancedata-module","chapter":"2 A more realistic example of SpaDES","heading":"2.2.1.1 speciesAbundanceData module:","text":"module downloads freely available spatial layers Picea glauca percent cover (% cover) across Canada pre-processes match user-supplied study area raster.\nuse new terra package throughout example, since raster package soon discontinued.prepInputs function downloads % cover layer Canadian National Forest Inventory data server using URL supplied sppAbundURL processes match study area raster (studyAreaRas) supplied user.\nmodule outputs Picea glauca % cover raster (sppAbundanceRas) data.table (sppAbundanceDT).\ndata.table contains added information year simulation data used (, first year SDM fitting happens).export species % cover two formats (raster table) demonstrational purposes, also envision model (.e. group modules) save species distribution projections several points time compact format data.table – large raster layers can consume considerable amount disk space (see Coding future].","code":"\n## Everything in this file and any files in the R directory are sourced during `simInit()`;\n## all functions and objects are put into the `simList`.\n## To use objects, use `sim$xxx` (they are globally available to all modules).\n## Functions can be used inside any function that was sourced in this module;\n## they are namespaced to the module, just like functions in R packages.\n## If exact location is required, functions will be: `sim$.mods$<moduleName>$FunctionName`.\ndefineModule(sim, list(\n  name = \"speciesAbundanceData\",\n  description = paste(\"Data module to prepare tree species cover data for species distribution modelling.\", \n                      \"Defaults to using Canadian National Forest Inventory data.\"),\n  keywords = c(\"minimal SpaDES example\", \"species distribution model\"),\n  authors = person(\"Me\", email = \"me@example.com\", role = c(\"aut\", \"cre\")),\n  childModules = character(0),\n  version = list(speciesAbundanceData = \"0.0.0.9000\"),\n  timeframe = as.POSIXlt(c(NA, NA)),\n  timeunit = \"year\",\n  citation = list(\"citation.bib\"),\n  documentation = list(\"README.md\", \"speciesAbundanceData.Rmd\"), ## same file\n  reqdPkgs = list(\"PredictiveEcology/SpaDES.core@development (>=1.0.10.9000)\",\n                  \"terra\", \"ggplot2\", \"rasterVis\"),\n  parameters = bindrows(\n    #defineParameter(\"paramName\", \"paramClass\", value, min, max, \"parameter description\"),\n    defineParameter(\"sppAbundURL\", \"character\", \n                    paste0(\"https://ftp.maps.canada.ca/pub/nrcan_rncan/Forests_Foret/\",\n                           \"canada-forests-attributes_attributs-forests-canada/\",\n                           \"2001-attributes_attributs-2001/NFI_MODIS250m_2001_kNN_Species_Pice_Gla_v1.tif\"), NA, NA,\n                    paste(\"URL where the first RasterLayer of species abundance resides.\",\n                          \"This will be the abundance data used to fit the species ditribution model.\",\n                          \"Defaults to *Picea glauca* percent cover across Canada, in 2001\", \n                          \"(from Canadian National Forest Inventory forest attributes)\")),\n    defineParameter(\".plots\", \"character\", \"screen\", NA, NA,\n                    \"Used by Plots function, which can be optionally used here\"),\n    defineParameter(\".plotInitialTime\", \"numeric\", start(sim), NA, NA,\n                    \"Describes the simulation time at which the first plot event should occur.\"),\n    defineParameter(\".plotInterval\", \"numeric\", NA, NA, NA,\n                    \"Describes the simulation time interval between plot events.\"),\n    defineParameter(\".saveInitialTime\", \"numeric\", NA, NA, NA,\n                    \"Describes the simulation time at which the first save event should occur.\"),\n    defineParameter(\".saveInterval\", \"numeric\", NA, NA, NA,\n                    \"This describes the simulation time interval between save events.\"),\n    defineParameter(\".studyAreaName\", \"character\", NA, NA, NA,\n                    \"Human-readable name for the study area used. If NA, a hash of studyArea will be used.\"),\n    ## .seed is optional: `list('init' = 123)` will `set.seed(123)` for the `init` event only.\n    defineParameter(\".seed\", \"list\", list(), NA, NA,\n                    \"Named list of seeds to use for each event (names).\"),\n    defineParameter(\".useCache\", \"logical\", FALSE, NA, NA,\n                    \"Should caching of events or module be used?\")\n  ),\n  inputObjects = bindrows(\n    #expectsInput(\"objectName\", \"objectClass\", \"input object description\", sourceURL, ...),\n    expectsInput(\"studyAreaRas\", objectClass = \"RasterLayer\", \n                 desc = \"A binary raster of the study area\")\n  ),\n  outputObjects = bindrows(\n    #createsOutput(\"objectName\", \"objectClass\", \"output object description\", ...),\n    createsOutput(\"sppAbundanceDT\", \"data.table\", \n                  desc = paste(\"Species abundance data from `sppAbundanceRas`, with columns 'cell',\",\n                               \"'x', 'y', 'sppAbund' and 'year' (an integer matching the number in\",\n                               \"names(`sppAbundanceRas`).\" )),\n    createsOutput(\"sppAbundanceRas\", \"SpatRaster\", \n                  desc = paste(\"A species abundance layer used to fit a species distribution model\",\n                               \"at the start of the simulation. Layers named as:\",\n                               \"paste('year', start(sim):end(sim), sep = '_')). Data obtained from\",\n                               \"P(sim)$sppAbundURL\"))\n  )\n))\n\n## event types\n#   - type `init` is required for initialization\n\ndoEvent.speciesAbundanceData = function(sim, eventTime, eventType, debug = FALSE) {\n  switch(\n    eventType,\n    init = {\n      ## do stuff for this event\n      sim <- abundanceInit(sim)\n      \n      ## schedule future event(s)\n      sim <- scheduleEvent(sim, eventTime = P(sim)$.plotInitialTime, \n                           moduleName = \"speciesAbundanceData\", eventType = \"abundPlot\",\n                           eventPriority = .normal())\n    },\n    abundPlot = {\n      ## do stuff for this event\n      sim <- abundancePlot(sim)\n    },\n    warning(paste(\"Undefined event type: '\", current(sim)[1, \"eventType\", with = FALSE],\n                  \"' in module '\", current(sim)[1, \"moduleName\", with = FALSE], \"'\", sep = \"\"))\n  )\n  return(invisible(sim))\n}\n\n## event functions\n#   - keep event functions short and clean, modularize by calling subroutines from section below.\n\n## Initialisation Event function\nabundanceInit <- function(sim) {\n  ## download data - prepInputs does all the heavy-lifting of dowloading and pre-processing the layer and caches.\n  sppAbundanceRas <- prepInputs(targetFile = \"NFI_MODIS250m_2001_kNN_Species_Pice_Gla_v1.tif\",\n                                url = P(sim)$sppAbundURL,\n                                fun = \"terra::rast\",\n                                overwrite = TRUE,\n                                cacheRepo = cachePath(sim))\n  sppAbundanceRas <- project(sppAbundanceRas, sim$studyAreaRas)\n  sppAbundanceRas <- crop(sppAbundanceRas, sim$studyAreaRas)\n  sppAbundanceRas <- mask(sppAbundanceRas, sim$studyAreaRas)\n  \n  names(sppAbundanceRas) <- paste(\"year\", time(sim), sep = \"_\")\n  \n  sppAbundanceDT <- as.data.table(as.data.frame(sppAbundanceRas, xy = TRUE, cells = TRUE))\n  sppAbundanceDT[, year := as.integer(sub(\"year_\", \"\", names(sppAbundanceRas)))]\n  setnames(sppAbundanceDT, \"year_1\", \"sppAbund\")\n  \n  ## export to sim\n  sim$sppAbundanceRas <- sppAbundanceRas\n  sim$sppAbundanceDT <- sppAbundanceDT\n  \n  return(invisible(sim))\n}\n\n## Plotting event function \nabundancePlot <- function(sim) {\n  ## plot species abundance\n  Plots(sim$sppAbundanceRas, fn = plotSpatRaster, types = P(sim)$.plots,\n        usePlot = TRUE, filename = file.path(outputPath(sim), \"figures\", \"speciesAbundance\"), \n        plotTitle = \"Species abundance data\", xlab = \"Longitude\", ylab = \"Latitude\")\n  \n  return(invisible(sim))\n}\n\n\n.inputObjects <- function(sim) {\n  \n  #cacheTags <- c(currentModule(sim), \"function:.inputObjects\") ## uncomment this if Cache is being used\n  dPath <- asPath(getOption(\"reproducible.destinationPath\", dataPath(sim)), 1)\n  message(currentModule(sim), \": using dataPath '\", dPath, \"'.\")\n  \n  # ! ----- EDIT BELOW ----- ! #\n  \n  if (!suppliedElsewhere(sim$studyAreaRas)) {\n    ## code check: did the user supply a study area?\n    stop(\"Please supply a 'studyAreaRas' SpatRaster\")\n  }\n  \n  # ! ----- STOP EDITING ----- ! #\n  return(invisible(sim))\n}"},{"path":"part2.html","id":"climatedata-module","chapter":"2 A more realistic example of SpaDES","heading":"2.2.1.2 climateData module:","text":"module downloads processes freely available spatial layers four bioclimatic variables used fit SDM Picea glauca study area.module uses different way download data.\nrelies two input data.tables contain URLs climate covariate, one baseline conditions, projected climate conditions, containing information layer used simulation (“year”column).supplied one set data sources default baseline climate conditions (baselineClimateURLs) climate projections (projClimateURLs), downloaded WorldClim 2.5 minutes resolution.\nbaseline climate data correspond 1970-2000 period (Fick & Hijmans 2017), aligns well species % cover data year (2001).\nclimate projections obtained 2021-2040, 2041-2060, 2061-2080 2081-2100, CMIP6 downscaled future projections using CanESM5 model (Swart et al. 2019) SSP 585 climate scenario.encourage providing different (additional) URLs referring projections climate periods, climate models climate scenarios (see WorldClim list climate projections).providing URLs obtain different climate data, pay special attention “year” column projClimateURLs – URLs need correspond simulation year used (necessarily actual climate year, unless simulation years follow numbering).Like speciesAbundanceData module, prepInputs function processes cliamte layers match study area raster (studyAreaRas) compiles climate data climateDT object raster layer objects (baselineClimateRas projClimateRas) – module’s outputs.draw attention particular aspects data modules:took care define data classes parameters, expected inputs module outputs respective metadata sections;took care define data classes parameters, expected inputs module outputs respective metadata sections;added additional R packages necessary run module metadata;added additional R packages necessary run module metadata;added default values parameters inputs explicitly used modules (others like .plotInterval left NA).\nexception studyAreaRas input object provide default.\nHowever, added code check .inputObject stops interrupts R object sim (see Protect others common mistakes/problems)added default values parameters inputs explicitly used modules (others like .plotInterval left NA).\nexception studyAreaRas input object provide default.\nHowever, added code check .inputObject stops interrupts R object sim (see Protect others common mistakes/problems)use function prepInputs heavy-lifting downloading data spatial pre-processing.\nfunction able recognize whether data already downloaded, can cache spatial processing tasks (see Caching).\ncases, wrapped prepInputs Map call loop several URLs download pre-process many data layers.\nMap call can also cached Cache.use function prepInputs heavy-lifting downloading data spatial pre-processing.\nfunction able recognize whether data already downloaded, can cache spatial processing tasks (see Caching).\ncases, wrapped prepInputs Map call loop several URLs download pre-process many data layers.\nMap call can also cached Cache.use function Plots control plotting screen device /save image files depending P(sim)$.plots argument.\nNote Plots works best functions output ggplot objects, compatible quickPlot::Plot.use function Plots control plotting screen device /save image files depending P(sim)$.plots argument.\nNote Plots works best functions output ggplot objects, compatible quickPlot::Plot.fact neither module depends .\nrequired feature data modules, just happens case example.\nfact, complex modelling frameworks, like LandR model (Barros et al. n.d.), often several data modules depend (e.g., LandR Biomass_speciesData sources processes tree species percent cover data used LandR Biomass_borealDataPrep estimate several parameters forest landscape simulation model LandR Biomass_core).fact neither module depends .\nrequired feature data modules, just happens case example.\nfact, complex modelling frameworks, like LandR model (Barros et al. n.d.), often several data modules depend (e.g., LandR Biomass_speciesData sources processes tree species percent cover data used LandR Biomass_borealDataPrep estimate several parameters forest landscape simulation model LandR Biomass_core).export objects created within module functions sim.\nWithout , objects lost function executed.export objects created within module functions sim.\nWithout , objects lost function executed.","code":"\n## Everything in this file and any files in the R directory are sourced during `simInit()`;\n## all functions and objects are put into the `simList`.\n## To use objects, use `sim$xxx` (they are globally available to all modules).\n## Functions can be used inside any function that was sourced in this module;\n## they are namespaced to the module, just like functions in R packages.\n## If exact location is required, functions will be: `sim$.mods$<moduleName>$FunctionName`.\ndefineModule(sim, list(\n  name = \"climateData\",\n  description = paste(\"Data module to prepare climate data for species distribution modelling.\", \n                      \"Defaults to using bioclimatic variables from Worldclim.\"),\n  keywords = c(\"minimal SpaDES example\", \"species distribution model\"),\n  authors = person(\"Me\", email = \"me@example.com\", role = c(\"aut\", \"cre\")),\n  childModules = character(0),\n  version = list(climateData = \"0.0.0.9000\"),\n  timeframe = as.POSIXlt(c(NA, NA)),\n  timeunit = \"year\",\n  citation = list(\"citation.bib\"),\n  documentation = list(\"README.md\", \"climateData.Rmd\"), ## same file\n  reqdPkgs = list(\"PredictiveEcology/SpaDES.core@development (>=1.0.10.9000)\",\n                  \"ggplot2\", \"rasterVis\", \"terra\", \"data.table\"),\n  parameters = bindrows(\n    #defineParameter(\"paramName\", \"paramClass\", value, min, max, \"parameter description\"),\n    defineParameter(\".plots\", \"character\", \"screen\", NA, NA,\n                    \"Used by Plots function, which can be optionally used here\"),\n    defineParameter(\".plotInitialTime\", \"numeric\", start(sim), NA, NA,\n                    \"Describes the simulation time at which the first plot event should occur.\"),\n    defineParameter(\".plotInterval\", \"numeric\", NA, NA, NA,\n                    \"Describes the simulation time interval between plot events.\"),\n    defineParameter(\".saveInitialTime\", \"numeric\", NA, NA, NA,\n                    \"Describes the simulation time at which the first save event should occur.\"),\n    defineParameter(\".saveInterval\", \"numeric\", NA, NA, NA,\n                    \"This describes the simulation time interval between save events.\"),\n    defineParameter(\".studyAreaName\", \"character\", NA, NA, NA,\n                    \"Human-readable name for the study area used. If NA, a hash of studyArea will be used.\"),\n    ## .seed is optional: `list('init' = 123)` will `set.seed(123)` for the `init` event only.\n    defineParameter(\".seed\", \"list\", list(), NA, NA,\n                    \"Named list of seeds to use for each event (names).\"),\n    defineParameter(\".useCache\", \"logical\", FALSE, NA, NA,\n                    \"Should caching of events or module be used?\")\n  ),\n  inputObjects = bindrows(\n    #expectsInput(\"objectName\", \"objectClass\", \"input object description\", sourceURL, ...),\n    expectsInput(\"baselineClimateURLs\", \"data.table\", \n                 desc = paste(\"A table with columns 'vars', 'URL', 'targetFile' and 'year', containing\",\n                              \"variable names, URLs and raster file names of each climate covariate\",\n                              \"used in the species distribution models. Year is the first year of the\", \n                              \"simulation (not the reference climate period). Defaults to Worldclim's\",\n                              \"'bio1', 'bio4', 'bio12' and 'bio15' bioclimatic variables for the 1970-2000\",\n                              \"climate period, at 2.5 minutes.\")),\n    expectsInput(\"projClimateURLs\", \"data.table\", \n                 desc = paste(\"Same as `baselineClimateURLs` but refering to projected climate layers.\",\n                              \"Variable names in 'vars' need to the same as in `baselineClimateURLs`\",\n                              \"and P(sim)$projClimateURLs. Years should correspond to simulation years.\",\n                              \"Defaults to 2081-2100 projections using the CanESM5 climate model and the\",\n                              \"SSP 585 climate scenario, at 2.5 minutes, obtained from Worldclim.\")),\n    expectsInput(\"studyAreaRas\", objectClass = \"SpatRaster\", \n                 desc = \"A binary raster of the study area\")\n  ),\n  outputObjects = bindrows(\n    #createsOutput(\"objectName\", \"objectClass\", \"output object description\", ...),\n    createsOutput(\"climateDT\", \"data.table\", \n                  desc = paste(\"A data.table with as many columns as the climate covariates\", \n                               \"used in the species distribution model and 'year' column describing\",\n                               \"the simulation year to which the data corresponds.\")),\n    createsOutput(\"baselineClimateRas\", \"SpatRaster\", \n                  desc = paste(\"Baseline climate layers obtained from `baselineClimateURLs`\")),\n    createsOutput(\"projClimateRas\", \"SpatRaster\", \n                  desc = paste(\"Baseline climate layers obtained from `projClimateURLs`\"))\n  )\n))\n\n## event types\n#   - type `init` is required for initialization\n\ndoEvent.climateData = function(sim, eventTime, eventType, debug = FALSE) {\n  switch(\n    eventType,\n    init = {\n      ## do stuff for this event\n      sim <- climateInit(sim)\n      \n      ## schedule future event(s)\n      sim <- scheduleEvent(sim, eventTime = P(sim)$.plotInitialTime, \n                           moduleName = \"climateData\", eventType = \"climPlot\",\n                           eventPriority = .normal())\n    },\n    climPlot = {\n      ## do stuff for this event\n      sim <- climatePlot(sim)\n    },\n    warning(paste(\"Undefined event type: '\", current(sim)[1, \"eventType\", with = FALSE],\n                  \"' in module '\", current(sim)[1, \"moduleName\", with = FALSE], \"'\", sep = \"\"))\n  )\n  return(invisible(sim))\n}\n\n## event functions\n#   - keep event functions short and clean, modularize by calling subroutines from section below.\n\n## Initialisation Event function\nclimateInit <- function(sim) {\n  ## GET BASELINE DATA\n  ## make a vector of archive (zip) file names if the url points to one.\n  archiveFiles <- sapply(sim$baselineClimateURLs$URL, function(URL) {\n    if (grepl(\"\\\\.zip$\", basename(URL))) {\n      basename(URL)\n    } else {\n      NULL\n    }\n  }, USE.NAMES = FALSE)\n  \n  ## check that baseline climate data only has one year value\n  if (length(unique(sim$baselineClimateURLs$year)) != 1) {\n    stop(paste(\"'baselineClimateURLs' should all have the same 'year' value,\",\n               \"corresponding to the first year of the simulation\"))\n  }\n  ## download data - prepInputs does all the heavy-lifting of dowloading and pre-processing the layer and caches.\n  baselineClimateRas <- Cache(Map, \n                              f = prepInputs,\n                              url = sim$baselineClimateURLs$URL,\n                              targetFile = sim$baselineClimateURLs$targetFile,\n                              archive = archiveFiles,\n                              MoreArgs = list(\n                                fun = \"terra::rast\",\n                                overwrite = TRUE,\n                                rasterToMatch = sim$studyAreaRas,\n                                cacheRepo = cachePath(sim)),\n                              cacheRepo = cachePath(sim))\n  \n  names(baselineClimateRas) <- paste0(sim$baselineClimateURLs$vars, \"_year\", sim$baselineClimateURLs$year)\n  \n  ## make a stack\n  baselineClimateRas <- rast(baselineClimateRas)\n  \n  ## make a data.table \n  baselineClimateData <- as.data.table(as.data.frame(baselineClimateRas, xy = TRUE, cells = TRUE))\n  setnames(baselineClimateData, sub(\"_year.*\", \"\", names(baselineClimateData))) ## don't need year in names here \n  baselineClimateData[, year := unique(sim$baselineClimateURLs$year)]\n  \n  ## GET PROJECTED DATA\n  ## make a vector of archive (zip) file names if the url points to one.\n  archiveFiles <- lapply(sim$projClimateURLs$URL, function(URL) {\n    if (grepl(\"\\\\.zip$\", basename(URL))) {\n      basename(URL)\n    } else {\n      NULL\n    }\n  })\n  \n  ## download data - prepInputs does all the heavy-lifting of dowloading and pre-processing the layer and caches.\n  projClimateRas <- Cache(Map, \n                          f = prepInputs,\n                          url = sim$projClimateURLs$URL,\n                          targetFile = sim$projClimateURLs$targetFile,\n                          archive = archiveFiles,\n                          MoreArgs = list(\n                            fun = \"terra::rast\",\n                            overwrite = TRUE,\n                            rasterToMatch = sim$studyAreaRas,\n                            cacheRepo = cachePath(sim)),\n                          cacheRepo = cachePath(sim))\n  \n  ## these rasters are different. The tif file contains all the variables in different layers\n  ## so, for each variable, we need to keep only the layer of interest\n  projClimateRas <- mapply(function(stk, var) {\n    lyr <- which(sub(\".*_\", \"BIO\", names(projClimateRas[[1]])) == var)\n    return(stk[[lyr]])\n  }, stk = projClimateRas, var = sim$projClimateURLs$vars)\n  names(projClimateRas) <- paste0(sim$projClimateURLs$vars, \"_year\", sim$projClimateURLs$year)\n  \n  ## make a stack\n  projClimateRas <- rast(projClimateRas)\n  \n  ## make a data.table \n  projClimateData <- as.data.table(as.data.frame(projClimateRas, xy = TRUE, cells = TRUE))\n  \n  ## melt so that year is in a column\n  projClimateDataMolten <- lapply(unique(sim$projClimateURLs$vars), function(var, projClimateData) {\n    cols <- grep(paste0(var, \"_year\"), names(projClimateData), value = TRUE)\n    idCols <- names(projClimateData)[!grepl(\"_year\", names(projClimateData))]\n    \n    moltenDT <-  melt(projClimateData, id.vars = idCols, measure.vars = cols, \n                      variable.name = \"year\", value.name = var)\n    moltenDT[, year := sub(paste0(var, \"_year\"), \"\", year)]\n    moltenDT[, year := as.integer(year)]\n    return(moltenDT)\n  }, projClimateData = projClimateData)\n  \n  idCols <- c(names(projClimateData)[!grepl(\"_year\", names(projClimateData))], \"year\")\n  ## set keys for merge\n  projClimateDataMolten <- lapply(projClimateDataMolten, function(DT, cols) {\n    setkeyv(DT, cols = cols)\n    return(DT)\n  }, cols = idCols)\n  \n  projClimateData <- Reduce(merge, projClimateDataMolten)\n  \n  ## bind the two data.tables\n  if (!identical(sort(names(baselineClimateData)), sort(names(projClimateData)))) {\n    stop(\"Variable names in `projClimateURLs` differ from those in `baselineClimateURLs`\")\n  }\n  \n  ## check\n  if (!compareGeom(baselineClimateRas, projClimateRas, res = TRUE, stopOnError = FALSE)) {\n    stop(\"`baselineClimateRas` and `projClimateRas` do not have the same raster properties\")\n  }\n  \n  ## export to sim\n  sim$baselineClimateRas <- baselineClimateRas\n  sim$projClimateRas <- projClimateRas\n  sim$climateDT <- rbindlist(list(baselineClimateData, projClimateData), use.names = TRUE)\n  \n  return(invisible(sim))\n}\n\n## Plotting event function \nclimatePlot <- function(sim) {\n  ## plot climate rasters \n  allRasters <- rast(list(sim$baselineClimateRas, sim$projClimateRas))\n  lapply(sim$baselineClimateURLs$vars, function(var, allRasters) {\n    lrs <- grep(paste0(var, \"_\"), names(allRasters))\n    file_name <- paste0(\"climateRas_\", var)\n    Plots(allRasters[[lrs]],\n          fn = plotSpatRasterStk, types = P(sim)$.plots,\n          usePlot = FALSE,\n          filename = file.path(outputPath(sim), \"figures\", file_name),\n          xlab = \"Longitude\", ylab = \"Latitude\")\n    }, allRasters = allRasters)\n\n  return(invisible(sim))\n}\n\n\n.inputObjects <- function(sim) {\n  #cacheTags <- c(currentModule(sim), \"function:.inputObjects\") ## uncomment this if Cache is being used\n  dPath <- asPath(getOption(\"reproducible.destinationPath\", dataPath(sim)), 1)\n  message(currentModule(sim), \": using dataPath '\", dPath, \"'.\")\n  \n  # ! ----- EDIT BELOW ----- ! #\n  \n  if (!suppliedElsewhere(sim$studyAreaRas)) {\n    ## code check: did the user supply a study area?\n    stop(\"Please supply a 'studyAreaRas' SpatRaster\")\n  }\n  \n  if (!is(sim$studyAreaRas, \"SpatRaster\")) {\n    sim$studyAreaRas <- rast(sim$studyAreaRas)\n  }\n  \n  if (!suppliedElsewhere(sim$baselineClimateURLs)) {\n    sim$baselineClimateURLs <- data.table(vars = c(\"BIO1\", \"BIO4\", \"BIO12\", \"BIO15\"),\n                                          URL = c(\"https://biogeo.ucdavis.edu/data/worldclim/v2.1/base/wc2.1_2.5m_bio.zip\",\n                                                  \"https://biogeo.ucdavis.edu/data/worldclim/v2.1/base/wc2.1_2.5m_bio.zip\",\n                                                  \"https://biogeo.ucdavis.edu/data/worldclim/v2.1/base/wc2.1_2.5m_bio.zip\",\n                                                  \"https://biogeo.ucdavis.edu/data/worldclim/v2.1/base/wc2.1_2.5m_bio.zip\"),\n                                          targetFile = c(\"wc2.1_2.5m_bio_1.tif\", \"wc2.1_2.5m_bio_4.tif\", \"wc2.1_2.5m_bio_12.tif\", \"wc2.1_2.5m_bio_15.tif\"),\n                                          year = rep(1L, 4))\n  }\n  \n  if (!suppliedElsewhere(sim$projClimateURLs)) {\n    sim$projClimateURLs <- data.table(vars = rep(c(\"BIO1\", \"BIO4\", \"BIO12\", \"BIO15\"), times = 4),\n                                      URL = rep(c(\"https://geodata.ucdavis.edu/cmip6/2.5m/CanESM5/ssp585/wc2.1_2.5m_bioc_CanESM5_ssp585_2021-2040.tif\",\n                                                  \"https://geodata.ucdavis.edu/cmip6/2.5m/CanESM5/ssp585/wc2.1_2.5m_bioc_CanESM5_ssp585_2041-2060.tif\",\n                                                  \"https://geodata.ucdavis.edu/cmip6/2.5m/CanESM5/ssp585/wc2.1_2.5m_bioc_CanESM5_ssp585_2061-2080.tif\",\n                                                  \"https://geodata.ucdavis.edu/cmip6/2.5m/CanESM5/ssp585/wc2.1_2.5m_bioc_CanESM5_ssp585_2081-2100.tif\"),\n                                                each = 4),\n                                      targetFile = rep(c(\"wc2.1_2.5m_bioc_CanESM5_ssp585_2021-2040.tif\",\n                                                         \"wc2.1_2.5m_bioc_CanESM5_ssp585_2041-2060.tif\",\n                                                         \"wc2.1_2.5m_bioc_CanESM5_ssp585_2061-2080.tif\",\n                                                         \"wc2.1_2.5m_bioc_CanESM5_ssp585_2081-2100.tif\"),\n                                                       each = 4),\n                                      year = rep(2L:5L, each = 4))\n  } \n  \n  # ! ----- STOP EDITING ----- ! #\n  return(invisible(sim))\n}"},{"path":"part2.html","id":"simulation-module","chapter":"2 A more realistic example of SpaDES","heading":"2.2.1.3 “Simulation” module","text":"show .R script projectSpeciesDist module.\nmodule depends entirely two, provide default input objects .inputObjects function.\n, course, good practice, warn user early (.inputObjects function) module find necessary inputs.module fits machine learning SDM using MaxEnt algorithm implemented dismo package.\nrecommend look guide learn fitting SDMs dismo .\nfitting SDM, module converts non-binary species data presences absences.main outputs species distribution projections form plots stacked raster layer (sppDistProj) fitted SDM object.draw attention :said earlier, added yearly projected values sppAbundanceDT table.\ncase probably changed object’s name, since MaxEnt modelling species abundance, probability occurrence.\nsuggest exercise ownAs said earlier, added yearly projected values sppAbundanceDT table.\ncase probably changed object’s name, since MaxEnt modelling species abundance, probability occurrence.\nsuggest exercise ownHow links data modules established declaring data modules’ output objects expected inputs module.links data modules established declaring data modules’ output objects expected inputs module.fitSDM event schedule (SDM needs fitted ).fitSDM event schedule (SDM needs fitted )., unlike fitSDM, projSDM event schedules model projections executed year simulation, provided corresponding environmental data – notice functions fitSDMEvent projSDMEvent check data current year simulation (time(sim))., unlike fitSDM, projSDM event schedules model projections executed year simulation, provided corresponding environmental data – notice functions fitSDMEvent projSDMEvent check data current year simulation (time(sim)).fitted model object (sdmOut) ’s evaluation (evalOut) module outputs.\nway objects can used events, also inspected user simulation finished (see Transparent models).fitted model object (sdmOut) ’s evaluation (evalOut) module outputs.\nway objects can used events, also inspected user simulation finished (see Transparent models).","code":"\n## Everything in this file and any files in the R directory are sourced during `simInit()`;\n## all functions and objects are put into the `simList`.\n## To use objects, use `sim$xxx` (they are globally available to all modules).\n## Functions can be used inside any function that was sourced in this module;\n## they are namespaced to the module, just like functions in R packages.\n## If exact location is required, functions will be: `sim$.mods$<moduleName>$FunctionName`.\ndefineModule(sim, list(\n  name = \"projectSpeciesDist\",\n  description = \"\",\n  keywords = \"\",\n  authors = structure(list(list(given = c(\"First\", \"Middle\"), family = \"Last\", role = c(\"aut\", \"cre\"), email = \"email@example.com\", comment = NULL)), class = \"person\"),\n  childModules = character(0),\n  version = list(projectSpeciesDist = \"0.0.0.9000\"),\n  timeframe = as.POSIXlt(c(NA, NA)),\n  timeunit = \"year\",\n  citation = list(\"citation.bib\"),\n  documentation = list(\"README.md\", \"projectSpeciesDist.Rmd\"), ## same file\n  reqdPkgs = list(\"PredictiveEcology/SpaDES.core@development (>=1.0.10.9000)\", \"ggplot2\",\n                  \"data.table\", \"dismo\"),\n  parameters = bindrows(\n    #defineParameter(\"paramName\", \"paramClass\", value, min, max, \"parameter description\"),\n    defineParameter(\"predVars\", \"character\", c(\"BIO1\", \"BIO4\", \"BIO12\", \"BIO15\"), NA, NA,\n                    \"Predictors used in statistical model.\"),\n    defineParameter(\"statModel\", \"character\", \"MaxEnt\", NA, NA,\n                    paste(\"What statitical algorith to use. Currently only 'MaxEnt' and 'GLM' are\",\n                          \"supported. 'MaxEnt will fit a MaxEnt model using dismo::maxent; 'GLM'\",\n                          \"will fit a generalised linear model with a logit link using\",\n                          \"glm(..., family = 'binomial'). In both cases all predictor variables are used,\",\n                          \"and for GLM only additive effects are considered.\" )),\n    defineParameter(\".plots\", \"character\", \"screen\", NA, NA,\n                    \"Used by Plots function, which can be optionally used here\"),\n    defineParameter(\".plotInitialTime\", \"numeric\", start(sim), NA, NA,\n                    \"Describes the simulation time at which the first plot event should occur.\"),\n    ## .seed is optional: `list('init' = 123)` will `set.seed(123)` for the `init` event only.\n    defineParameter(\".seed\", \"list\", list(), NA, NA,\n                    \"Named list of seeds to use for each event (names).\"),\n    defineParameter(\".useCache\", \"logical\", FALSE, NA, NA,\n                    \"Should caching of events or module be used?\")\n  ),\n  inputObjects = bindrows(\n    #expectsInput(\"objectName\", \"objectClass\", \"input object description\", sourceURL, ...),\n    expectsInput(\"climateDT\", \"data.table\", \n                 desc = paste(\"A data.table with as many columns as the climate covariates\", \n                              \"used in the species distribution model and 'year' column describing\",\n                              \"the simulation year to which the data corresponds.\")),\n    expectsInput(\"sppAbundanceDT\", \"data.table\", \n                 desc = paste(\"A species abundance data. Converted to presence/absence data, if not binary\")),\n    expectsInput(\"studyAreaRas\", objectClass = \"RasterLayer\", \n                 desc = \"A binary raster of the study area\")\n  ),\n  outputObjects = bindrows(\n    #createsOutput(\"objectName\", \"objectClass\", \"output object description\", ...),\n    createsOutput(objectName = \"sppDistProj\", objectClass = \"SpatRaster\",\n                  desc = paste(\"Species distribution projections - raw predictions.\",\n                               \"Each layer corresponds to a prediciton year\")),\n    createsOutput(objectName = \"evalOut\", objectClass = \"ModelEvaluation\", \n                  desc = paste(\"`sdmOut` model evaluation statistics. Model evaluated on the 20% of\",\n                               \"the data. See `?dismo::evaluation`.\")),\n    createsOutput(objectName = \"sdmData\", objectClass = \"data.table\", \n                  desc = \"Input data used to fit `sdmOut`.\"),\n    createsOutput(objectName = \"sdmOut\", objectClass = c(\"MaxEnt\", \"glm\"),\n                  desc = paste(\"Fitted species distribution model. Model fitted on 80%\",\n                               \"of `sdmData`, with remaining 20% used for evaluation.\"))\n  )\n))\n\n## event types\n#   - type `init` is required for initialization\n\ndoEvent.projectSpeciesDist = function(sim, eventTime, eventType) {\n  switch(\n    eventType,\n    init = {\n      ### check for more detailed object dependencies:\n      ### (use `checkObject` or similar)\n      \n      # do stuff for this event\n      sim <- SDMInit(sim)\n      \n      # schedule future event(s)\n      sim <- scheduleEvent(sim, start(sim), \"projectSpeciesDist\", \"fitSDM\")\n      sim <- scheduleEvent(sim, start(sim), \"projectSpeciesDist\", \"evalSDM\", \n                           eventPriority = .normal() + 1)\n      sim <- scheduleEvent(sim, start(sim), \"projectSpeciesDist\", \"projSDM\", \n                           eventPriority = .normal() + 2)\n      sim <- scheduleEvent(sim, P(sim)$.plotInitialTime, \"projectSpeciesDist\", \"plotProjSDM\",\n                           eventPriority = .normal() + 3)\n      \n    },\n    fitSDM = {\n      # ! ----- EDIT BELOW ----- ! #\n      sim <- fitSDMEvent(sim)\n      # ! ----- STOP EDITING ----- ! #\n    },\n    evalSDM = {\n      # ! ----- EDIT BELOW ----- ! #\n      sim <- evalSDMEvent(sim)\n      # ! ----- STOP EDITING ----- ! #\n    },\n    projSDM = {\n      # ! ----- EDIT BELOW ----- ! #\n      sim <- projSDMEvent(sim)\n      \n      sim <- scheduleEvent(sim, time(sim) + 1L, \"projectSpeciesDist\", \"projSDM\")\n      # ! ----- STOP EDITING ----- ! #\n    },\n    plotProjSDM = {\n      # ! ----- EDIT BELOW ----- ! #\n      plotProjEvent(sim)\n      \n      sim <- scheduleEvent(sim, time(sim) + 1L, \"projectSpeciesDist\", \"plotProjSDM\",\n                           eventPriority = .normal() + 1)\n      \n      # ! ----- STOP EDITING ----- ! #\n    },\n    warning(paste(\"Undefined event type: \\'\", current(sim)[1, \"eventType\", with = FALSE],\n                  \"\\' in module \\'\", current(sim)[1, \"moduleName\", with = FALSE], \"\\'\", sep = \"\"))\n  )\n  return(invisible(sim))\n}\n\n## event functions\n#   - keep event functions short and clean, modularize by calling subroutines from section below.\n\n### template initialization\nSDMInit <- function(sim) {\n  # # ! ----- EDIT BELOW ----- ! #\n  ## at this point we can only have the following columns\n  if (!identical(sort(names(sim$sppAbundanceDT)), sort(c(\"cell\", \"x\", \"y\", \"sppAbund\", \"year\")))) {\n    stop(paste(\"sim$sppAbundanceDT can only have the following columns at the start of year 1:\\n\",\n               paste(c(\"cell\", \"x\", \"y\", \"sppAbund\", \"year\"), collapse = \", \")))\n  }\n  \n  if (length(setdiff(sim$climateDT$cell, sim$sppAbundanceDT$cell)) > 0 ||\n      length(setdiff(sim$sppAbundanceDT$cell, sim$climateDT$cell)) > 0) {\n    stop(\"'cell' columns in `climateDT` and `sppAbundanceDT` have different values\")\n  }\n  \n  if (!P(sim)$statModel %in% c(\"MaxEnt\", \"GLM\")) {\n    stop(\"'statModel' parameter must be 'MaxEnt' or 'GLM'\")\n  }\n  \n  ## a few data cleaning steps to make sure we have presences and absences:\n  sppAbundanceDT <- copy(sim$sppAbundanceDT)\n  if (min(range(sppAbundanceDT$sppAbund)) < 0) {\n    sppAbundanceDT[sppAbund < 0, sppAbund := 0]\n  }\n  \n  if (max(range(sppAbundanceDT$sppAbund)) > 1) {\n    message(\"Species data is > 1. Converting to presence/absence\")\n    sppAbundanceDT[sppAbund > 0, sppAbund := 1]\n  }\n  \n  ## join the two datasets - note that there are no input species abundances beyond year 1\n  sim$sdmData <- merge(sim$climateDT, sppAbundanceDT[, .(cell, sppAbund, year)], \n                       by = c(\"cell\", \"year\"), all = TRUE)\n  setnames(sim$sdmData, \"sppAbund\", \"presAbs\")\n  \n  # ! ----- STOP EDITING ----- ! #\n  return(invisible(sim))\n}\n\nfitSDMEvent <- function(sim) {\n  # ! ----- EDIT BELOW ----- ! #\n  ## break data into training and testing subsets\n  dataForFitting <- sim$sdmData[year == time(sim)]\n  \n  if (nrow(dataForFitting) == 0) {\n    stop(paste(\"No data for year\", time(sim), \"provided to fit the model\"))\n  }\n  \n  group <- kfold(dataForFitting, 5)\n  ## save the the split datasets as internal objects to this module\n  mod$trainData <- dataForFitting[group != 1, ]\n  mod$testData <-  dataForFitting[group == 1, ]\n  \n  predVars <- P(sim)$predVars\n  if (P(sim)$statModel == \"MaxEnt\") {\n    sim$sdmOut <- maxent(x = as.data.frame(mod$trainData[, ..predVars]), \n                         p = mod$trainData$presAbs)\n  } else {\n    ## make an additive model with all predictors - avoid using as.formula, which drags the whole environment\n    form <- enquote(paste(\"presAbs ~\", paste(predVars, collapse = \"+\")))\n    sim$sdmOut <- glm(formula = eval(expr = parse(text = form)), \n                      family = \"binomial\", data = mod$trainData)\n  }\n  # ! ----- STOP EDITING ----- ! #\n  return(invisible(sim))\n}\n\nevalSDMEvent <- function(sim) {\n  # ! ----- EDIT BELOW ----- ! #\n  ## validate model\n  predVars <- P(sim)$predVars\n  sim$evalOut <- evaluate(p = mod$testData[presAbs == 1, ..predVars],\n                          a = mod$testData[presAbs == 0, ..predVars],\n                          model = sim$sdmOut)\n  ## save the threshold of presence/absence in an internal object to this module\n  mod$thresh <- threshold(sim$evalOut, 'spec_sens')\n  \n  # ! ----- STOP EDITING ----- ! #\n  return(invisible(sim))\n}\n\nprojSDMEvent <- function(sim) {\n  # ! ----- EDIT BELOW ----- ! #\n  ## predict across the full data and make a map\n  dataForPredicting <- sim$sdmData[year == time(sim)]\n  \n  if (nrow(dataForPredicting) == 0) {\n    stop(paste(\"No data for year\", time(sim), \"provided to calculate predictions\"))\n  }\n  \n  predVars <- P(sim)$predVars\n  preds <- predict(sim$sdmOut, as.data.frame(dataForPredicting[, ..predVars]),\n                   progress = '')\n  sppDistProj <- replace(sim$studyAreaRas, which(!is.na(sim$studyAreaRas[])), preds)\n  names(sppDistProj) <- paste0(\"year\", time(sim))\n  \n  if (is.null(sim$sppDistProj)) {\n    sim$sppDistProj <- sppDistProj\n  } else {\n    sim$sppDistProj <- rast(list(sim$sppDistProj, sppDistProj))\n  }\n  \n  # ! ----- STOP EDITING ----- ! #\n  return(invisible(sim))\n}\n\nplotProjEvent <- function(sim) {\n  # ! ----- EDIT BELOW ----- ! #\n  checkPath(file.path(outputPath(sim), \"figures\"), create = TRUE)\n  \n  if (any(!is.na(P(sim)$.plots))) {\n    \n    ## response plot\n    ## we can't use Plots to plot and save SDM predictions with dismo.\n    ## these are only saved to disk\n    fileSuffix <- paste0(P(sim)$statModel, \".png\")\n  \n      notScreen <- setdiff(P(sim)$.plots, \"screen\")\n    if (any(notScreen != \"png\")) {\n      warning(paste(currentModule(sim), \"only saves to PNG at the moment.\"))\n    } \n    png(file.path(outputPath(sim), \"figures\", paste0(\"SDMresponsePlot_\", fileSuffix)))\n    response(sim$sdmOut)\n    dev.off()\n    \n    ## species projections\n    fileSuffix <- paste0(P(sim)$statModel, \"_Year\", time(sim))\n    clearPlot()\n    rawValsPlot <- sim$sppDistProj[[paste0(\"year\", time(sim))]]\n    Plots(rawValsPlot, fn = plotSpatRaster, types = P(sim)$.plots,\n          usePlot = TRUE, filename = file.path(outputPath(sim), \"figures\", paste0(\"projRawVals_\", fileSuffix)), \n          plotTitle = paste(\"Projected raw values -\", \"year\", time(sim)),\n          xlab = \"Longitude\", ylab = \"Latitude\")\n    PAsPlot <- sim$sppDistProj[[paste0(\"year\", time(sim))]] > mod$thresh\n    Plots(PAsPlot, fn = plotSpatRaster, types = P(sim)$.plots,\n          usePlot = TRUE, filename = file.path(outputPath(sim), \"figures\", paste0(\"projPA_\", fileSuffix)), \n          plotTitle = paste(\"Projected presence/absence -\", \"year\", time(sim)),\n          xlab = \"Longitude\", ylab = \"Latitude\")\n  }\n  \n  # ! ----- STOP EDITING ----- ! #\n  return(invisible(sim))\n}\n\n.inputObjects <- function(sim) {\n  #cacheTags <- c(currentModule(sim), \"function:.inputObjects\") ## uncomment this if Cache is being used\n  dPath <- asPath(getOption(\"reproducible.destinationPath\", dataPath(sim)), 1)\n  message(currentModule(sim), \": using dataPath '\", dPath, \"'.\")\n  \n  # ! ----- EDIT BELOW ----- ! #\n  ## check that necessary objects are in the simList or WILL BE supplied  by another module\n  if (!suppliedElsewhere(\"climateDT\") | !suppliedElsewhere(\"sppAbundanceDT\") ) {\n    stop(\"Please provide `climateDT` and `sppAbundanceDT`\")\n  }\n  \n  # ! ----- STOP EDITING ----- ! #\n  return(invisible(sim))\n}"},{"path":"part2.html","id":"running-the-model","chapter":"2 A more realistic example of SpaDES","heading":"2.3 Running the model","text":"","code":""},{"path":"part2.html","id":"ensuring-all-packages-are-installed","chapter":"2 A more realistic example of SpaDES","heading":"2.3.1 Ensuring all packages are installed","text":"modules created, go back Example2_SDMMaxent.R script set run simulation.\nfirst line code ensures module dependencies (dependencies ) installed .libPaths().\nattempt install missing packages.\nload SpaDES (necessary run simulation)./!\\ ATTENTION /!\\makeSureAllPackagesInstalled may fail install packages loaded already, recommend running line clean R session.\nalso recommend restarting R session makeSureAllPackagesInstalled installs packages.Windows can present problems many packages installed package installations fail.\nsee errors like restarting R:encounter error, delete problematic file/folder try .Sometimes Require may still unable automatically install package manual installation clean session solution.\nerror , Require detected glue missing simInit call, meant packages loaded already causing failure Require attempted installation.\nproblem persisted even avoided loading terra running simInit (make study area objects prefixing functions terra::), glue manually installed.","code":"\n## this line can be used to make sure all packages are installed\nSpaDES.install::makeSureAllPackagesInstalled(simPaths$modulePath)\n\n## you should restart R again if any packages were installed\n\n## load necessary packages now\nlibrary(SpaDES)\nlibrary(SpaDES.experiment)Installing: glue Detaching is fraught with many potential problems; you may have to restart your session if things aren't working some packages don't seem to unload their dlls correctly.\nThese will not be unloaded: ellipsis, vctrs Unloading package bit64 -- Installing glue -- (1 of 1. Estimated time left: ...; est. finish: ...calculating) Installing package into '\\~/R/win-library/4.0' (as 'lib' is unspecified) trying URL '<https://cran.rstudio.com/bin/windows/contrib/4.0/glue_1.6.2.zip>' Content type 'application/zip' length 171858 bytes (167 KB) downloaded 167 KB\n\npackage 'glue' successfully unpacked and MD5 sums checked Error in unpackPkgZip(foundpkgs[okp, 2L], foundpkgs[okp, 1L], lib, libs_only, : ERROR: failed to lock directory '\\~\\R\\win-library\\\\4.0' for modifying Try removing '\\~\\R\\win-library\\\\4.0/00LOCK'"},{"path":"part2.html","id":"simulation-set-up","chapter":"2 A more realistic example of SpaDES","heading":"2.3.2 Simulation set-up","text":"simulation folder directories already set creating modules (see ), still necessary create lists passed simInit function, initializes simulation.\nlists define modules used simulation (simModules), start end simulation (simTimes), parameters passed module (simParams) external input objects (simObjects) like study area (studyAreaRas).studyAreaRas created random polygon drawn SW Alberta, Canada, using SpaDES.tools::randomStudyArea.\n(Fig. 2.1).also define useful global options:reproducible.cachePath reproducible.destinationPath define cache directory directory downloaded processed data stored;reproducible.cachePath reproducible.destinationPath define cache directory directory downloaded processed data stored;reproducible.useCache reproducible.useTerra, activate caching use terra package across Cache prepInputs function calls.reproducible.useCache reproducible.useTerra, activate caching use terra package across Cache prepInputs function calls.\nFigure 2.1: Study area within Canada.\nrunning simulation look module linkage diagrams produced moduleDiagram (Fig. 2.2) objectDiagram (Fig. 2.3) assess whether modules linked expected.\nFigure 2.2: Module network diagram.\n\nFigure 2.3: Module diagram showing module inter-dependencies object names.\n","code":"\n## a few important options:\noptions(reproducible.useCache = TRUE,\n        reproducible.cachePath = simPaths$cachePath,\n        reproducible.destinationPath = simPaths$inputPath, ## all downloaded and pre-processed layers go here\n        reproducible.useTerra = TRUE)  ## we want to use the terra R package\n\n## list the modules to use\nsimModules <- list(\"speciesAbundanceData\", \"climateData\", \"projectSpeciesDist\")\n\n## Set simulation and module parameters\nsimTimes <- list(start = 1, end = 5, timeunit = \"year\")\n\n## we create two lists of parameters, one using the default MaxEnt\n## the other a GLM\nsimParamsMaxEnt <- list(\n  \"speciesAbundanceData\" = list(\n    \".plots\" = c(\"screen\", \"png\"),\n    # \".useCache\" = c(\".inputObjects\", \"init\")\n    \".useCache\" = FALSE\n  ),\n  \"climateData\" = list(\n    \".plots\" = c(\"screen\", \"png\"),\n    # \".useCache\" = c(\".inputObjects\", \"init\")\n    \".useCache\" = FALSE\n  ),\n  \"projectSpeciesDist\" = list(\n    \"statModel\" = \"MaxEnt\",\n    \".plots\" = c(\"screen\", \"png\"),\n    # \".useCache\" = c(\".inputObjects\", \"init\")\n    \".useCache\" = FALSE\n  )\n)\n\nsimParamsGLM <- simParamsMaxEnt\nsimParamsGLM$projectSpeciesDist$statModel <- \"GLM\"\n\n## make a random study area.\n##  Here use seed to make sure the same study area is always generated\nstudyArea <- terra::vect(SpaDES.tools::randomStudyArea(size = 1e10, seed = 123))\nstudyAreaRas <- terra::rasterize(studyArea, \n                                 terra::rast(extent = terra::ext(studyArea), \n                                             crs = terra::crs(studyArea, proj = TRUE), \n                                             resolution = 1000))\nsimObjects <- list(\n  \"studyAreaRas\" = studyAreaRas\n)\n\n## Simulation setup - create two simulations, one for MaxEnt another for GLM\n## SpaDES.experiment::experiment2, will take care of subdirectories to store outputs\nmySimMaxEnt <- simInit(times = simTimes, params = simParamsMaxEnt, \n                       modules = simModules, objects = simObjects, \n                       paths = simPaths)\nmySimGLM <- simInit(times = simTimes, params = simParamsGLM, \n                    modules = simModules, objects = simObjects, \n                    paths = simPaths)#> Warning: [vect] argument 'crs' should be a character value\nmoduleDiagram(mySimMaxEnt)\nobjectDiagram(mySimMaxEnt)"},{"path":"part2.html","id":"simulation-runs","chapter":"2 A more realistic example of SpaDES","heading":"2.3.3 Simulation runs","text":"run simulation, can call spades output simLists (called mySimMaxEnt mySimMaxGLM ) generated simInit, use experiment2 SpaDES.experiment package.\nexperiment2 run many simulations simLists organise outputs sub-folders within simPaths$outputs directory.\ncan also repeat simulations (rep argument) parallelise across replicates using future.\nSee ?experiment2 examples.advise using spades running model first time.\nPassing argument debug = TRUE print progress simulation detail.\nhelps diagnosing problems simulation fails, also seeing events executed particular cache calls activated.Try execute spades call twice see much faster runs many operations cached.\nNotice also, init events retrieved cache thanks .useCache parameters passed modules (see also Caching).outputs model shown .\nresults can see MaxEnt predictions.\nmissing important covariates, interactions, simply appropriate algorithm.invite peruse GLM results model evaluation results.\ninstance:\nFigure 2.4: Simulation plots: Input Picea glauca % cover across landscape - note values converted presence/absence.\n\nFigure 2.5: Simulation plots: Bioclimatic variables baseline (year 1) future conditions\n\nFigure 2.6: Simulation plots: Raw predicted values species probability occurence (left right) baseline climate conditions (first year simulation), 2021-2040, 2041-2060, 2061-2080 2081-2100 climate conditions (second fifth years simulation) - using MaxEnt.\n\nFigure 2.7: Simulation plots: Predictions Picea glauca presences/absences (left right) baseline climate conditions (first year simulation), 2021-2040, 2041-2060, 2061-2080 2081-2100 climate conditions (second fifth years simulation) - using MaxEnt.\n","code":"\n## run simulation\nclearPlot(force = TRUE)   ## this forces wiping the graphics device and opening a new window\n\n## This runs one simulation and stores outputs in the main 'outputs' folder \n## - not what we want, but good for testing\n# mySimOut <- spades(mySimMaxEnt, debug = TRUE)  \n\n## Better to use when spades runs error-free on the simLists\nmyExperiment <- experiment2(MaxEnt = mySimMaxEnt, \n                            GLM = mySimGLM, \n                            debug = TRUE, \n                            replicates = 1,\n                            clearSimEnv = FALSE)   ## prevent removing objects from the simLists at the end\nmyExperiment$MaxEnt_rep1$sdmOut   ## this links to an html page\n\nsets <- par(mfrow = c(2,2))\nplot(myExperiment$GLM_rep1$sdmOut)\npar(sets)\n\n## check validation results for the two models\nmyExperiment$MaxEnt_rep1$evalOut\nmyExperiment$GLM_rep1$evalOut"},{"path":"part2.html","id":"caching","chapter":"2 A more realistic example of SpaDES","heading":"2.4 Caching","text":"example, relied caching avoid repeat computationally intensive operations.\nRunning simInit spades calls second time (even restarting R session) faster SpaDES informed us instances cached objects retrieved:(…) Mar05 19:56:53 clmtDt 1 climateData init 1\nMar05 19:56:53 clmtDt …(Object retrieve (a7816e2d0deb3b29.rds)) Mar05 19:56:53 clmtDt loaded cached result previous Map call (…)Caching SpaDES managed reproducible package, can generally broken two types: explicitly coded module developer, internal SpaDES functions.","code":""},{"path":"part2.html","id":"explicitly-caching-operations","chapter":"2 A more realistic example of SpaDES","heading":"2.4.1 Explicitly caching operations","text":"Throughout data modules explicitly cached several data preparation operations using functions Cache prepInputs reproducible package.brief, Cache searches stored (.e. cached) output given function call; find , Cache executes function call, saves output saves information function inputs function’s code.\nfind , Cache compares present inputs function code cached counterparts.\ncase mismatch, function call executed re-cached.prepInputs calls Cache internally several points, notably cache spatial processing tasks (e.g. projecting cropping spatial layers study area raster).\nAnother great feature prepInputs source URL target file (used prepInputs download species % cover climate layers), first checks whether data already downloaded (potentially extracted archive folder – .zip file).\nthing caching, also avoids unnecessary downloads can time consuming.Note caching operations involving stochasticity avoided, prevent new random outputs generated.recommend exploring examples available Cache prepInputs R documentation learn capabilities.\nparticular, read showCache, clearCache argument userTags, allow consulting deleting cached files./!\\ ATTENTION /!\\Cache deal well apply family functions, used Map (instead mapply) iteratively apply prepInputs several climate layer URLs.","code":""},{"path":"part2.html","id":"implicit-caching-of-events","chapter":"2 A more realistic example of SpaDES","heading":"2.4.2 Implicit caching of events","text":"SpaDES offers implicit caching events via global parameter .useCache, comes template modules generated newModule.\ncall “implicit” caching, developer need add caching mechanisms module code.\nSpaDES automatically reads value .useCache parameter activates caching module accordingly.parameter can used cache () module events (entirety).\nexample, cached data preparation events across modules (.inputObjects init events example), events fitted SDM generated projections.\ntruth, none modules simulate stochastic processes, cached events.\nLoading cached events produced slightly different message loading cached operations (see ):Mar05 19:58:34 spcsbn 1 speciesAbundanceData init 1\nMar05 19:58:34 spcsbn …(Object retrieve (bffbc48cc055c846.rds)) Mar05 19:58:35 spcsbn loaded cached copy init event speciesAbundanceData module.","code":""},{"path":"part2.html","id":"controlling-caching-without-changing-module-code","chapter":"2 A more realistic example of SpaDES","heading":"2.4.3 Controlling caching without changing module code","text":"addition , controls caching module level.user can turn caching /without caching module code via three different mechanisms:via .useCache parameter – explained (Implicit caching events), setting parameter controls event caching inside module;via .useCache parameter – explained (Implicit caching events), setting parameter controls event caching inside module;via options(\"reproducible.useCache\") – setting option TRUE FALSE global environment (.GlobalEnv) affect caching (inside outside SpaDES modules simulation);via options(\"reproducible.useCache\") – setting option TRUE FALSE global environment (.GlobalEnv) affect caching (inside outside SpaDES modules simulation);via argument spades(.useCache = ...) – argument behaves way .useCache module parameter, supersedes across modules (.e. spades(..., .useCache = FALSE), caching turned even module’s .useCache TRUE).via argument spades(.useCache = ...) – argument behaves way .useCache module parameter, supersedes across modules (.e. spades(..., .useCache = FALSE), caching turned even module’s .useCache TRUE).","code":""},{"path":"part2.html","id":"best-practices","chapter":"2 A more realistic example of SpaDES","heading":"2.5 Best practices","text":"","code":""},{"path":"part2.html","id":"reproducible-package-installation","chapter":"2 A more realistic example of SpaDES","heading":"2.5.1 Reproducible package installation","text":"sharing code, good practice provide users list necessary packages (e.g. listing sequence library calls start script).\ngo step advise users provide code automatically installs necessary packages start controller script.\naddition modules contain full list packages depend , particular versions necessary.\noptions(\"spades.useRequire\") set TRUE (default), SpaDES automatically attempt install packages listed across modules installed .libPaths(), installed version (branch installing GitHub) correspond listed module .R script.\nUsers can also use Require::pkgSnapshot() save list installed packages can used later Require install necessary packages another machine (see example ).Please beware package installation done much possible clean R session especially context SpaDES-based project, module can potentially many different dependencies, dependencies (see, instance, delayed package loading modules place dependencies checked Example2_SDMMaxent.R)","code":"\nRequire::pkgSnapshot(\"pkgsnapshot.txt\")\n\n## on another machine:\nRequire::Require(packageVersionFile = \"pkgsnapshot.txt\")\n\n## See ?Require::pkgSnapshot() for more examples."},{"path":"part2.html","id":"protect-yourself-and-others-from-common-mistakesproblems","chapter":"2 A more realistic example of SpaDES","heading":"2.5.2 Protect yourself and others from common mistakes/problems","text":"developer put place code checks, warnings messages protect warn user common mistakes issues.\nfall category code assertions – small tests verify snippet code.\ncomplex tests assess whether module (group modules) producing expected results , e.g., ecological point view fall category integration tests.\n, talk code assertions.common assertion verify input format class conform function expects.\ncase, developer may add mechanism correct faulty inputs (potentially warning message telling user ) simply stop computations meaningful error.\nprovide two examples climateData module, climateInit function checks whether bioclimatic variable names consistent baseline projected climate data, whether raster layers match.assertions can prevent undesirable function behaviours, statement protecting newModule call Example2_SDMMaxent.R, warn user something missing early , check studyAreaRas existence .inputObjects data modules).Bear mind just examples assertions integration tests diverse code test.","code":""},{"path":"part2.html","id":"readable-code","chapter":"2 A more realistic example of SpaDES","heading":"2.5.3 Readable code","text":"several guides write reader-friendly code.\nEven developer forever sole reader code, benefits writing readable code.\nFirst, working less tiresome.\nSecond, quickly forget wrote code certain away.\nCode well documented readable easier “come back ” adapt.follow many recommendations Hadley Wickham, highlight find particularly important:spacing around operators;spacing around operators;spacing left parenthesis, except function call;spacing left parenthesis, except function call;adding curly braces , else, function, unless short statements;adding curly braces , else, function, unless short statements;thoroughly commenting code;thoroughly commenting code;naming functions meaningfully avoiding re-use function names (e.g. avoid c <- function (...) {}, c already base function).naming functions meaningfully avoiding re-use function names (e.g. avoid c <- function (...) {}, c already base function).can automatically cleanup format code using styler package.\npackage provides Rstudio addin easily style block selected code, entire file.","code":""},{"path":"part2.html","id":"module-documentation-module-.rmd","chapter":"2 A more realistic example of SpaDES","heading":"2.5.4 Module documentation – module .Rmd","text":"modules created using newModule, function provides template module .Rmd file meant document module.\ntemplate suggests key sections part module’s documentation.\nNotably, overview module inputs, parameters, outputs general event flow, together -depth descriptions sections.documentation may also contain reproducible examples module can used, although always relevant.\ninstance, data modules often meaningless without downstream modules use outputs.invite reader see manual forest landscape simulation model LandR Biomass_core, example document SpaDES modules.","code":""},{"path":"part2.html","id":"coding-for-the-future","chapter":"2 A more realistic example of SpaDES","heading":"2.5.5 Coding for the future","text":"often make coding decisions regret months line.\nmodule developers, good idea think possible applications module potential expansion avenues.\ninstance, trying imagine module can scaled transferred different study areas, may influence format expected inputs outputs.\nexample, exported type information (species % cover climate data) raster layers tables, foresee tables used store several projections compact format.","code":""},{"path":"part2.html","id":"transparent-models","chapter":"2 A more realistic example of SpaDES","heading":"2.5.6 Transparent models","text":"Model transparency using open source code making available.\nProviding easy access model data, parameters outputs also important.\ninstance, example deliberately exported fitted statistical model sdmOut, data (sdmData) evaluation statistics (evalOut) can easily inspected user, without needing “dive ” code.SpaDES also offers ability save objects exported simList object without change module code.\n, user passes data.frame object names (potentially) simulation times saved simInit(outputs = ...) argument.\nobjects saved .rds files default, object class can saved disk (see ?outputs information).","code":""},{"path":"part2.html","id":"additional-notes-1","chapter":"2 A more realistic example of SpaDES","heading":"2.5.7 Additional notes","text":"SpaDES extremely powerful family R packages, whose potential goes well beyond discussed .\nrecommend going SpaDES webpage find SpaDES R modelling platform, upcoming workshops publications.\nSee also Predictive Ecology Github repository list available SpaDES modules SpaDES-related packages maintain.wish acknowledge World Climate Research Programme, coordinated promoted CMIP6, thank climate modelling groups producing making available model output, Earth System Grid Federation (ESGF) archiving data providing access, WorldClim downscaling sharing climate projections preparing bioclimatic variables.Happy SpaDESing!","code":""},{"path":"part2.html","id":"references","chapter":"2 A more realistic example of SpaDES","heading":"2.6 References","text":"","code":""}]
